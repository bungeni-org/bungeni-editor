#summary Defining a Section Type

= Introduction =

A *sectionType* in the Bungeni Editor gets translated to a container element in XML.
Metadata and Translation aspects can be associated with a sectionType via configuration and it also supports applying a limited set of visual properties via configuration. 

A sectionType is internally implemented in the Editor using a ODF text:section element. 


= Section Type Configuration =

a sectionType is defined in the `settings/configs/section_types/` folder where every documentType describes its available sectionTypes. 

The following describes a configuration for the Bill sectionType 'CoverPage' without additional metadata :
{{{
<sectionTypes for="bill">

<sectionType name="CoverPage"
    prefix="coverpage"
    numstyle="single"
    background="0xfaf8cb"
    indent-left=".1"
    indent-right="0"
    visibility="user" >

 </sectionType>

.....
</sectionTypes>
}}}

The individual parameters are described below :

 * *sectionType/@name - REQUIRED* - the name of the sectionType this is how the system will internally the type of the section.
 * *sectionType/@prefix - REQUIRED* -  the internal name of the section created using the sectionType. e.g. If we create a instance of a sectionType named "CoverPage" , a section called "coverpage" will be generated in the document.
 * *sectionType/@numstyle - REQUIRED* -  takes either 'single' or 'serial'. 'single' - will allow only one instance of the sectionType in the document. 'serial' will creation of multiple instance which will follow a serial number naming convention : coverpage1, coverpage2...etc.
 * *sectionType/@indent-left , sectionType@indent-right - OPTIONAL* - this specifies the indentation of an instance of the sectionType on the document
 * *sectionType/@background - OPTIONAL* - defaults to white, if specified either a background image (url:/path/to/image.png) or a hex-color (0xff0000 for red ) can be specified.
 * *sectionType/@visibility - OPTIONAL* - defaults to 'user' - not implemented yet, for future use. 

= Metadata = 

Section Types can be associated with metadata. 

The metadata list is defined in the `metadatas` block.

{{{
<sectionType name="Speech"
   .... >

     <metadatas>
         <metadata name="BungeniSpeechBy" />
         <metadata name="BungeniSpeechByURI" />
         <metadata name="BungeniSpeechAs" />
         <metadata name="BungeniSpeechAsDesc" />
         <metadata name="BungeniSpeechAsURI" />
         <metadata name="BungeniPersonId" />
         <metadata name="BungeniPersonRole" />
     </metadatas>

</sectionType>

}}}

The metadata names are declarative - they don't prescribe anything during
markup but are more prescriptive from the point of view of transformation.

The metadata name declares that the action using the section type as a metadata
source will set these metadata values in the section .i.e. it is upto the action
associated with the sectionType to set these metadata.


= Output = 

The output block describes how the section in the openoffice document will be 
converted for XML output.

The output block supports seperation of content and metadata in the transformed 
XML. This is done by separately defining output `meta` headers and output `content`
tags :

{{{
     <output>
         <meta>
             <TLCPerson id="$BungeniPersonID" href="$BungeniSpeechByURI" 
                showAs="$BungeniSpeechBy" />
             <TLCRole id="$BungeniSpeechAs" href="$BungeniSpeechAsURI" 
                showAs="$BungeniSpeechAsDesc" />
         </meta>
         <content>
            <speech by="#$BungeniPersonID" as="#$BungeniSpeechAs" /> 
         </content>
     </output>
}}}

The actual metadata is embedded into the output meta and content templates by 
refering to them by name :

`$BungeniSpeechByURI` renders the value of the BungeniSpeechByURI metadata in the
output XML.


= Configuration Examples = 

== Example 1 ==

Default configuration specifying minimal parameters and basic output template

<sectionType name="Speech"
    prefix="speech"
    numstyle="serial"
    >
    <output>
        <content>
         <speech />
        </content>
    </output>
</sectionType>


== Example 2 == 

Detailed configuration with output and metadata configuration

{{{
<sectionType name="Speech"
    prefix="speech"
    numstyle="serial"
    background="url:/settings/configs/backgrounds/shade-1.png"
    indent-left=".6"
    indent-right="0"
    visibility="user" >
     <metadatas>
         <metadata name="BungeniSpeechBy" />
         <metadata name="BungeniSpeechByURI" />
         <metadata name="BungeniSpeechAs" />
         <metadata name="BungeniSpeechAsDesc" />
         <metadata name="BungeniSpeechAsURI" />
         <metadata name="BungeniPersonId" />
         <metadata name="BungeniPersonRole" />
     </metadatas>
     <output>
         <meta>
             <TLCPerson id="$BungeniPersonID" href="$BungeniSpeechByURI" showAs="$BungeniSpeechBy" />
             <TLCRole id="$BungeniSpeechAs" href="$BungeniSpeechAsURI" showAs="$BungeniSpeechAsDesc" />
         </meta>
         <content>
            <speech by="#$BungeniPersonID" as="#$BungeniSpeechAs" /> 
         </content>
     </output>
 </sectionType>

}}}


= References =

 * [http://wiki.services.openoffice.org/wiki/Documentation/DevGuide/Text/Text_Sections OpenOffice document sections]
 * [http://docs.oasis-open.org/office/v1.2/os/OpenDocument-v1.2-os-part1.html#__RefHeading__1415162_253892949 ODF text:section]
 * [http://incubator.apache.org/odftoolkit/simple/document/javadoc/org/odftoolkit/simple/text/Section.html ODF Toolkit Section implementation]
