#summary How to register a new document type for BungeniEditor
#labels BungeniEditorClient

*Table of Contents*

* [RegisteringNewDocTypeForBungeniEditor#Introduction Introduction] 

* [RegisteringNewDocTypeForBungeniEditor#Create_the_template_for_the_document_type  Create a template for the document type] 

* [RegisteringNewDocTypeForBungeniEditor#Create_a_Metadata_Editor_for_the_document_type Create a metadata editor for the document type] 

* [RegisteringNewDocTypeForBungeniEditor#Register_the_new_Document_Type Register the new document type] 


= Introduction =

The BungeniEditor supports multiple document types.  Additional document types can be added by adding configuration entries 
into `settings/configs/doc_types.xml`.

The following steps describe the config entries required to register a new document type in the editor.

== Adding the DocType configuration ==

The doctype configuration resides in `settings/configs/doc_types.xml`.

The following is an example doctype configuration for the Bill document type :

{{{
    <doctype name="bill"
        template="workspace/templates/bill.ott"
        state="1"
        root="bill"
        default-part="main">
        <title xml:lang="eng">Bill</title>
        <title xml:lang="spa">proyceto</title>
        <uri type="work">~CountryCode~DocumentType~Year-Month-Day</uri>
        <uri type="expression">~CountryCode~DocumentType~Year-Month-Day~LanguageCode</uri>
        <file-name-scheme>CountryCode~DocumentType~Year-Month-Day~LanguageCode</file-name-scheme>
        <metadata-editors>
            <title xml:lang="eng">Bill Metadata</title>
            <metadata-editor class="org.bungeni.editor.metadata.editors.GeneralMetadata" >
                <title xml:lang="eng">General</title>
            </metadata-editor>
            <metadata-editor class="org.bungeni.editor.metadata.editors.BillMetadata" >
                <title xml:lang="eng">Bill</title>
            </metadata-editor>
        </metadata-editors>
        <parts>
            <part name="main">
                <title xml:lang="eng">Main</title>
                <title xml:lang="spa">principal</title>
            </part>
            <part name="annex">
                <title xml:lang="eng">Annex</title>
                <title xml:lang="spa">adjuntar</title>
            </part>
        </parts>
    </doctype>
}}}

The different configuration options are described below :

=== doctype element ===

The _name_ attribute provides the name of the document type

{{{
 <doctype name="bill"
}}}

The _template_ attribute provides path to the document template used by the document type.

{{{
        template="workspace/templates/bill.ott"
}}}

The _state_attribute indicates whether the doctype is enabled or not. `state="0"` disables the document type, and it will 
not appear in any visual selections in the Editor.
{{{
        state="1"
}}}

The _root_ attribute names the root section of the documen type. The root section with this name must be present in the template 
specified in the _template_ attribute.
{{{
        root="bill"
}}}

The _default-part_ attribute indicates the default part of the document
{{{
        default-part="main">
}}}

THe concept behind parts is to support segmented documents - usually documents like legislative bills are not one big document, but 
a set of composite documents (a "package") - which can include the main document, the annexes, attachments and reports.


== Create the template for the document type == 

The templates for the different document types are stored under the workspace/templates folder.  Templates are standard OpenOffice ott templates.

Create a template for the new document type (you can modify and renmae the templates for the hansard or bill). The root section of the document must be renamed to the name of the document type. e.g. the root section of the bill document type is called 'bill' ; for the debaterecord document type it is called 'debaterecord'


== Create a Metadata Editor for the document type == 

The Metadata Editor is the screen that pops up when you create new instance of a document type. This screen captures the initial metadata of the document its name, its publication date, its country, language etc. This information is used to identify the document as a whole.

In typical circumstances you can use the GeneralMetadata editor class which provides a generic metadata editor UI for typically used AkomaNtoso metadata. Custom metadata editors can be written for a document type if you want to provide an editor for additional metadata variables. To do this you will have to write a JPanel UI class which extends `BaseEditorDocMetadataDialog` e.g :
{{{

public class MyDocTypeMetadata extends BaseEditorDocMetadataDialog {

....
}

}}}
A generic metadata metadata model is provided by the `GeneralMetadataModel` class. You can extend the general metadata model by writing your own class either by extending GeneralMetadataModel or BaseEditorDocMetaModel.  The new class needs to be registered for the document type using the document_types.metadata_model_editor config setting (see below).

The metadata editor is registered in the `doc_types.xml` configuration which was described earlier, here is an example of the how the metadata editors are registered
for a doctype.

{{{
<doctype ...>
....
        <metadata-editors>
            <title xml:lang="eng">Bill Metadata</title>
            <metadata-editor class="org.bungeni.editor.metadata.editors.GeneralMetadata" >
                <title xml:lang="eng">General</title>
            </metadata-editor>
            <metadata-editor class="org.bungeni.editor.metadata.editors.BillMetadata" >
                <title xml:lang="eng">Bill</title>
            </metadata-editor>
        </metadata-editors>
....
</doctype>
}}}



== Registering Panels for the document type == 

The Editor's right hand pane has tabbed panels that allow the user to effect actions on the document. The available panels are packaged into the Editor application, but what panels are available for a doc type and in what order they are shown is done via panel configuration.

panels are managed in the  `settings/configs/panels` folder - here a panel config document per doc_type is required. The name of the config panel document should be the same as the name of the doctype.

{{{
<panels for="debaterecord">
    <panel name="actions" class="org.bungeni.editor.panels.loadable.documentActionPanel" state="1">
           <title xml:lang="eng">markup</title>
           <title xml:lang="spa">sugerir</title>
           <title xml:lang="ara">التقطيع</title>
    </panel>
    <panel name="allmeta" class="org.bungeni.editor.panels.loadable.MetadataPanel" state="1">
           <title xml:lang="eng">metadata</title>
           <title xml:lang="spa">metadatos</title>
           <title xml:lang="ara">واصفات البيانات</title>
    </panel>
    <panel name="structure" class="org.bungeni.editor.panels.loadable.documentStructurePanel" state="1">
           <title xml:lang="eng">structure</title>
           <title xml:lang="spa">estructura</title>
           <title xml:lang="ara">الهيكلية</title>
    </panel>
    <panel name="validate" class="org.bungeni.editor.panels.loadable.validateAndCheckPanel2" state="1">
           <title xml:lang="eng">validate</title>
           <title xml:lang="spa">validar</title>
           <title xml:lang="ara">التحقق من صحة المعلومات</title>
    </panel>
    <panel name="transform" class="org.bungeni.editor.panels.loadable.transformXMLPanel" state="1">
           <title xml:lang="eng">publish</title>
           <title xml:lang="spa">publicar</title>
           <title xml:lang="ara">النشر</title>
    </panel>
    <panel name="notes" class="org.bungeni.editor.panels.loadable.documentNotesPanel" state="1">
           <title xml:lang="eng">notes</title>
           <title xml:lang="spa">notas</title>
           <title xml:lang="ara">ملاحظات</title>
    </panel>
</panels>

}}}

= THE BELOW IS STILL OUT OF DATE =
== Enable available action conditions for the document type ==

Available action conditions for a document type are registered in the TOOLBAR_CONDITIONS table :

||DOCTYPE||CONDITION_NAME||CONDITION_CLASS||  
||debaterecord||fieldNotExists||org.bungeni.editor.toolbar.conditions.runnable.fieldNotExists||
||debaterecord||fieldExists||org.bungeni.editor.toolbar.conditions.runnable.fieldExists||


You can also import conditions form an existing doc type to the new doctype by using a SQL script for e.g. the following script imports all the conditions for the 'debaterecord' document type into the 'judgement' document type:
{{{
insert into toolbar_conditions ( doctype , condition_name, condition_class )
select 'judgement' , condition_name, condition_class from toolbar_conditions  where doctype  = 'debaterecord'
}}}



== Registering an Action set for the document type == 

Every document type is associated with an action set which is presented as a hierarchichal toolbar. The action set is defined in a XML file defined in the TOOLBAR_XML_CONFIG table. An action set for a document type can make use of actions available to that document type (refer to the previous sections on how to make actions  availabe for a document type)

The example below defines action sets for both the bill and the debaterecord document type.

||DOC_TYPE||TOOLBAR_XML||
||bill||settings/toolbar_bill.xml||
||debaterecord||settings/toolbar_debate.xml||


The action sets in the above example are present in the 'settings' folder of the editor installation. An action set is represented in XML and uses a particular syntax.  For details about action sets / and available actions provided by the editor refer to [http://code.google.com/p/bungeni-editor/wiki/ConditionProcessorsInBungeniEditor#Currently_Available_Conditions Condition Processors in Bungeni-Editor]


