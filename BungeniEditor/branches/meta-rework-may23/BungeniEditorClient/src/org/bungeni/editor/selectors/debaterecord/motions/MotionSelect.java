package org.bungeni.editor.selectors.debaterecord.motions;

import com.sun.star.text.XTextSection;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.bungeni.connector.client.BungeniConnector;
import org.bungeni.connector.element.Motion;

import org.bungeni.editor.selectors.BaseMetadataPanel;
import org.bungeni.extutils.CommonConnectorFunctions;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.ooo.utils.CommonExceptionUtils;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author  Ashok Hariharan
 */
public class MotionSelect extends BaseMetadataPanel {

    public static final String __PANEL_NAME__ = "MotionSelect";

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(MotionSelect.class.getName());
    // HashMap<String, String> selectionData = new HashMap<String,String>();
    ArrayList<ObjectMotion> motions = new ArrayList<ObjectMotion>(0);

    /** Creates new form QuestionSelect */
    public MotionSelect() {
        super();
        initComponents();
        initComboSelect();
        this.cboSelectMotion.addActionListener(new MotionSelector());
    }

    class MotionSelector implements ActionListener {

        public void actionPerformed(ActionEvent arg0) {
            try {
                if (cboSelectMotion.getSelectedIndex() != -1) {
                    ObjectMotion selectedMotion = (ObjectMotion) cboSelectMotion.getModel().getSelectedItem();

                    HashMap<String, String> selData = new HashMap<String, String>();
                    selData.put("MOTION_ID", selectedMotion.motionId);
                    selData.put("MOTION_NAME", selectedMotion.motionName);
                    selData.put("MOTION_URI", selectedMotion.motionUri);
                    selData.put("MOTION_TEXT", selectedMotion.motionText);
                    selData.put("MOTION_TITLE", selectedMotion.motionTitle);

                    (getContainerPanel()).selectionData = selData;
                    if ((getContainerPanel()).selectionData.size() > 0) {
                        (getContainerPanel()).updateAllPanels();
                    }
                }
            } catch (Exception ex) {
                log.error("MotionSelector:actionPerformed : " + ex.getMessage());
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboSelectMotion = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();

        setName("Select a Question"); // NOI18N

        cboSelectMotion.setEditable(true);
        cboSelectMotion.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        cboSelectMotion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboSelectMotion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        cboSelectMotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSelectMotionActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/bungeni/editor/selectors/debaterecord/motions/Bundle"); // NOI18N
        btnAdd.setText(bundle.getString("MotionSelect.btnAdd.text")); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(cboSelectMotion, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(cboSelectMotion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd))
        );
    }// </editor-fold>//GEN-END:initComponents

private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
    //make all the fields editable
    //
    //((Main)getContainerPanel()).
    (getContainerPanel()).enableAllChildPanels(true);

}//GEN-LAST:event_btnAddActionPerformed

private void cboSelectMotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSelectMotionActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_cboSelectMotionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JComboBox cboSelectMotion;
    // End of variables declaration//GEN-END:variables

    private void initComboSelect() {
        motions = getMotionObjects("");
        this.cboSelectMotion.setModel(new DefaultComboBoxModel(motions.toArray()));
        AutoCompleteDecorator.decorate(cboSelectMotion);
    }

    public ArrayList<ObjectMotion> getMotionObjects(String byMotion) {
        ArrayList<ObjectMotion> listofMotions = new ArrayList<ObjectMotion>(0);

        // !+BUNGENI_CONNECTOR(reagan,06-01-2012)
        // Changed the Initialization of the BungeniConnector Object
        // to ensure that metadata is accessed using the REST API
        // rather than directly from the datasource
        BungeniConnector client = null;
        try {
            client = CommonConnectorFunctions.getDSClient();

            List<Motion> motionsList = client.getMotions();

            for (int i = 0; i < motionsList.size(); i++) {
                Motion motion = motionsList.get(i);
                ObjectMotion m = new ObjectMotion(motion.getId(), motion.getTitle(), motion.getName(), motion.getText(), motion.getUri());
                listofMotions.add(m);
            }
            
        } catch (IOException ex) {
            log.error("Error initializing the BungeniConnectorClient " + ex) ;
        }        

        return listofMotions;

//            HashMap<String,String> registryMap = BungeniRegistryFactory.fullConnectionString();
//            BungeniClientDB dbInstance = new BungeniClientDB(registryMap);
//            dbInstance.Connect();
//            String sQuery = "";
//            if (byMotion.length() == 0)
//                sQuery = "Select MOTION_ID, MOTION_TITLE, MOTION_NAME, MOTION_TEXT, MOTION_URI from motions order by motion_name";
//            else
//                sQuery = "Select MOTION_ID, MOTION_TITLE, MOTION_NAME, MOTION_TEXT, MOTION_URI from motions where MOTION_ID = '" + byMotion +"'";
//
//
//            QueryResults qr = dbInstance.QueryResults("Select MOTION_ID, MOTION_TITLE, MOTION_NAME, MOTION_TEXT, MOTION_URI from motions order by motion_name");
//            dbInstance.EndConnect();
//            String motionId, motionTitle, motionName, motionText, motionURI;
//            if (qr.hasResults()) {
//                Vector<Vector<String>> theResults = qr.theResults();
//                for (Vector<String> row : theResults) {
//                     motionId = qr.getField(row, "MOTION_ID");
//                     motionTitle = qr.getField(row, "MOTION_TITLE");
//                     motionName = qr.getField(row, "MOTION_NAME");
//                     motionText = qr.getField(row, "MOTION_TITLE");
//                     motionURI = qr.getField(row, "MOTION_URI");
//                    ObjectMotion m = new ObjectMotion(motionId, motionTitle, motionName, motionText, motionURI);
//                    listofMotions.add(m);
//                }
//            }


    }

    public String getPanelName() {
        return "Title";
    }

    public Component getPanelComponent() {
        return this;
    }

    @Override
    public boolean doCancel() {
        return true;
    }

    @Override
    public boolean doReset() {
        return true;
    }

    @Override
    public boolean preFullEdit() {
        return true;
    }

    @Override
    public boolean processFullEdit() {
        Object selItem = this.cboSelectMotion.getSelectedItem();
        if (selItem != null) {
            if (selItem.getClass().getName().equals(ObjectMotion.class.getName())) {
                ObjectMotion selMotion = (ObjectMotion) selItem;
                HashMap<String, String> sectionmeta = new HashMap<String, String>();
                sectionmeta.put("BungeniMotionNo", selMotion.motionId);
                OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
                ooDoc.setSectionMetadataAttributes(getContainerPanel().getEditSectionName(), sectionmeta);
            }
        }
        return true;
    }

    @Override
    public boolean postFullEdit() {
        return true;
    }

    @Override
    public boolean preFullInsert() {
        return true;
    }

    @Override
    public boolean processFullInsert() {
        return true;
    }

    @Override
    public boolean postFullInsert() {
        return true;
    }

    @Override
    public boolean preSelectEdit() {
        return true;
    }

    @Override
    public boolean processSelectEdit() {
        return true;
    }

    @Override
    public boolean postSelectEdit() {
        return true;
    }

    @Override
    public boolean preSelectInsert() {
        return true;
    }

    @Override
    public boolean processSelectInsert() {
        log.error("Inserting the selected motion information into db");
        String motionId = (getContainerPanel()).selectionData.get("MOTION_ID");
        OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
        HashMap<String, String> sectionMeta = new HashMap<String, String>();
        String newSectionName = (getContainerPanel()).mainSectionName;
        sectionMeta.put("BungeniMotionNo", motionId);
        ooDoc.setSectionMetadataAttributes(newSectionName, sectionMeta);
        return true;
    }

    @Override
    public boolean postSelectInsert() {
        return true;
    }

    @Override
    public boolean validateSelectedEdit() {
        return true;
    }

    @Override
    public boolean validateSelectedInsert() {
        return true;
    }

    @Override
    public boolean validateFullInsert() {
        return true;
    }

    @Override
    public boolean validateFullEdit() {
        return true;
    }

    @Override
    protected void initFieldsSelectedEdit() {
        return;
    }

    @Override
    protected void initFieldsSelectedInsert() {
        //initComboSelect();
        return;
    }

    @Override
    protected void initFieldsInsert() {
        return;
    }

    @Override
    protected void initFieldsEdit() {
        try {
            OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
            DefaultComboBoxModel model = (DefaultComboBoxModel) this.cboSelectMotion.getModel();
            HashMap<String, String> sectionMeta = new HashMap<String, String>();
            XTextSection currentSection = ooDoc.currentSection();
            if (currentSection != null) {
                sectionMeta = ooDoc.getSectionMetadataAttributes(currentSection);
                if (sectionMeta.containsKey("BungeniMotionNo")) {
                    String motionNo = sectionMeta.get("BungeniMotionNo");
                    //ArrayList<ObjectMotion> vQuestion = getMotionObjects(motionNo);
                    // ObjectMotion oq = vQuestion.get(0);
                    int nIndex = findMotion(motionNo);
                    if (nIndex != -1) {
                        this.cboSelectMotion.setSelectedIndex(nIndex);
                        this.cboSelectMotion.setPopupVisible(true);
                        this.cboSelectMotion.showPopup();
                        // updateQuestionSelection(oq);
                    }
                    // this.cboQuestionSelect.setSelectedItem(oq);
                }
            }
        } catch (NullPointerException ex) {
            log.error("initFieldsEdit : " + ex.getMessage());
            log.error("initFieldsEdit : " + CommonExceptionUtils.getStackTrace(ex));
        } finally {
            return;
        }

    }

    private int findMotion(String motionId) {
        int i = 0;
        for (ObjectMotion c : motions) {
            if (c.motionId.equals(motionId)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}
