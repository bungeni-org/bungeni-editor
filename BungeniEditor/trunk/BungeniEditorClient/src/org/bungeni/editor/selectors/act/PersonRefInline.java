/*
 * Copyright (C) 2013 PC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.bungeni.editor.selectors.act;

import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.bungeni.editor.actions.routers.CommonRouterActions;
import org.bungeni.editor.selectors.BaseMetadataPanel;
import org.bungeni.ooo.OOComponentHelper;

/**
 *
 * @author PC
 */
public class PersonRefInline extends BaseMetadataPanel {

    /**
     * Creates new form PersonRef
     */
    public PersonRefInline() {
        initComponents();
    }

    @Override
    public String getPanelName() {
        return getName();
    }

    @Override
    public Component getPanelComponent() {
        return this;
    }

    class Person {
        String name; 
        String uri;
        String id;
        public Person(String name, String uri, String id){
            this.name = name;
            this.uri = uri;
            this.id = id;
        }
        @Override
        public String toString(){
            return name;
        }
    }
    
    List<Person> persons = new ArrayList<Person>(){
        {
           add(new Person("Samar Ayesh", "/ontology/Person/pl/Birzeit/2013", "unique-id-2013"));
           add(new Person("John Smith", "/ontology/Person/pl/SmithLand/2014", "unique-id-2014"));
           add(new Person("James Mango", "/ontology/Person/pl/MangoLand/2015", "unique-id-2015"));
        }
    };
    
    @Override
    public void commonInitFields(){
            DefaultComboBoxModel model = new DefaultComboBoxModel(persons.toArray());
            this.cboPersons.setModel(model);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboPersons = new javax.swing.JComboBox();
        lblPerson = new javax.swing.JLabel();

        cboPersons.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblPerson.setText("Select a Person");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboPersons, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPerson)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboPersons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboPersons;
    private javax.swing.JLabel lblPerson;
    // End of variables declaration//GEN-END:variables


    @Override
    public boolean processSelectInsert() {
        // this gets you the container section name 
          OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
          Person aPerson = (Person) cboPersons.getSelectedItem();
          CommonRouterActions.TypeCreationState tcs = getContainerPanel().initInlineType();
          if (tcs.propsMap != null ) {
             tcs.propsMap.put("BungeniPersonURI", aPerson.uri );
             tcs.propsMap.put("BungeniPersonID", aPerson.id );
             tcs.propsMap.put("BungeniPersonFullName", aPerson.name );
             ooDoc.setSelectedTextAttributes(tcs.propsMap);
          }
        return true;
    }


}
