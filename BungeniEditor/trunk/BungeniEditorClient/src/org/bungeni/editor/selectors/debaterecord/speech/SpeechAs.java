
package org.bungeni.editor.selectors.debaterecord.speech;

import java.awt.Component;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import org.bungeni.editor.selectors.BaseMetadataPanel;
import org.bungeni.ooo.OOComponentHelper;

/**
 *
 * @author  undesa
 */
public class SpeechAs extends  BaseMetadataPanel {

    /** Creates new form PersonSelector */
    public SpeechAs() {
        super();
        initComponents();
        initSpeechAsCombo();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_SpeechAs = new javax.swing.JLabel();
        cboSpeechAs = new javax.swing.JComboBox();

        setName("Speech By"); // NOI18N

        lbl_SpeechAs.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/bungeni/editor/selectors/debaterecord/speech/Bundle"); // NOI18N
        lbl_SpeechAs.setText(bundle.getString("SpeechAs.lbl_SpeechAs.text")); // NOI18N

        cboSpeechAs.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        cboSpeechAs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_SpeechAs, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSpeechAs, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbl_SpeechAs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cboSpeechAs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    class SpeechRole {
        String roleName;
        String roleDesc;

        public SpeechRole(String rName, String rDesc) {
            this.roleName = rName;
            this.roleDesc = rDesc;
        }

        @Override
        public String toString(){
            return roleDesc;
        }
    }

    private Vector<SpeechRole> getSpeechRoles(){
        Vector<SpeechRole> vRoles = new Vector<SpeechRole>();
        vRoles.add(new SpeechRole("Minister", "Minister"));
        vRoles.add(new SpeechRole("AsstMinister", "Assistant Minister"));
        vRoles.add(new SpeechRole("MemberOfParliament", "Member of Parliament"));
        vRoles.add(new SpeechRole("Speaker", "Speaker"));
        vRoles.add(new SpeechRole("DySpeaker", "Deputy Speaker"));
        return vRoles;
    }

    private void initSpeechAsCombo(){
        DefaultComboBoxModel speechRoleModel = new DefaultComboBoxModel(getSpeechRoles());
        this.cboSpeechAs.setModel(speechRoleModel);
    }

    private String getComboSelection(){
        SpeechRole speechRole = (SpeechRole) this.cboSpeechAs.getSelectedItem();
        return speechRole.roleName;

    }

    private void setComboSelection(String roleName) {
     DefaultComboBoxModel cboModel = (DefaultComboBoxModel) this.cboSpeechAs.getModel();
        for (int i = 0; i < cboModel.getSize() ; i++) {
           SpeechRole sRole =  (SpeechRole) cboModel.getElementAt(i);
           if (sRole.roleName.equals(roleName)) {
               this.cboSpeechAs.setSelectedIndex(i);
               break;
           }
        }
    }

      public String getPanelName() {
        return getName();
    }

    public Component getPanelComponent() {
        return this;
    }


    @Override
    public boolean doCancel() {
        return true;
    }

    @Override
    public boolean doReset() {
        return true;
    }

    @Override
    public boolean preFullEdit() {
        return true;
    }

    @Override
    public boolean processFullEdit() {
          OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
        HashMap<String,String> sectionMeta = new HashMap<String,String>();
        String editSection = (getContainerPanel()).getEditSectionName();
        sectionMeta.put("BungeniSpeechAs", getComboSelection());
        //sectionMeta.put("BungeniQuestionByURI", this.txtPersonURI.getText());
        ooDoc.setSectionMetadataAttributes(editSection, sectionMeta);      
        
        return true;
    }

    @Override
    public boolean postFullEdit() {
        return true;
    }

    @Override
    public boolean preFullInsert() {
        return true;
    }

    @Override
    public boolean processFullInsert() {
        return true;
    }

    @Override
    public boolean postFullInsert() {
        return true;
    }

    @Override
    public boolean preSelectEdit() {
        return true;
    }

    @Override
    public boolean processSelectEdit() {
        return true;
    }

    @Override
    public boolean postSelectEdit() {
        return true;
    }

    @Override
    public boolean preSelectInsert() {
        return true;
    }

    @Override
    public boolean processSelectInsert() {
        OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
        HashMap<String,String> sectionMeta = new HashMap<String,String>();
        String newSectionName = (getContainerPanel()).mainSectionName;
        sectionMeta.put("BungeniSpeechAs", getComboSelection());
        //sectionMeta.put("BungeniQuestionByURI", this.txtPersonURI.getText());
        ooDoc.setSectionMetadataAttributes(newSectionName, sectionMeta);      
        
        return true;
    }

    @Override
    public boolean doUpdateEvent(){
     //   HashMap<String,String> selectionData = (getContainerPanel()).selectionData;
    //    if (selectionData.containsKey("FIRST_NAME"))
    //        this.txt_SpeechAs.setText(selectionData.get("FIRST_NAME") + " " + selectionData.get("LAST_NAME"));
        return true;
    }
    @Override
    public boolean postSelectInsert() {
       return true;
    }

    @Override
    public boolean validateSelectedEdit() {
        return true;
    }

    @Override
    public boolean validateSelectedInsert() {
        return true;
    }

    @Override
    public boolean validateFullInsert() {
        return true;
    }

    @Override
    public boolean validateFullEdit() {
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboSpeechAs;
    private javax.swing.JLabel lbl_SpeechAs;
    // End of variables declaration//GEN-END:variables
    @Override
    protected void initFieldsSelectedEdit() {
        return;
    }

    @Override
    protected void initFieldsSelectedInsert() {
        return;
    }

    @Override
    protected void initFieldsInsert() {
        return;
    }

    @Override
    protected void initFieldsEdit() {
        this.setComboSelection(getSectionMetadataValue("BungeniSpeechAs"));
        return;
    }
}
