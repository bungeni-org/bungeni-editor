/*
 * QuestionAddressedTo.java
 *
 * Created on August 12, 2008, 2:06 PM
 */

package org.bungeni.editor.selectors.debaterecord.question;

import java.awt.Component;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import org.bungeni.connector.client.BungeniConnector;
import org.bungeni.connector.element.Member;
import org.bungeni.editor.selectors.BaseMetadataPanel;
import org.bungeni.extutils.CommonConnectorFunctions;
import org.bungeni.ooo.OOComponentHelper;

/**
 *
 * @author  undesa
 */
public class QuestionAddressedTo extends BaseMetadataPanel {

    // create variable for logging
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(QuestionAddressedTo.class.getName());
    
    /** Creates new form QuestionAddressedTo */
    public QuestionAddressedTo() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblQuestionAddressedTo = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        lblQuestionAddressedTo.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        lblQuestionAddressedTo.setText("Question Addressed To :");
        lblQuestionAddressedTo.setName("lbl_question_to"); // NOI18N

        jComboBox1.setEditable(true);
        jComboBox1.setModel(getMembersModel());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblQuestionAddressedTo, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jComboBox1, 0, 279, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblQuestionAddressedTo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel lblQuestionAddressedTo;
    // End of variables declaration//GEN-END:variables

public String getPanelName() {
        return getName();
    }

    public Component getPanelComponent() {
        return this;
    }


    @Override
    public boolean doCancel() {
        return true;
    }

    @Override
    public boolean doReset() {
        return true;
    }

    @Override
    public boolean preFullEdit() {
        return true;
    }

    @Override
    public boolean processFullEdit() {
        String editSectionName = getContainerPanel().getEditSectionName();
        if (editSectionName.length() > 0 ) {
            HashMap<String,String> sectionMeta = new HashMap<String,String>();
            sectionMeta.put("BungeniQuestionTo", (String) this.jComboBox1.getSelectedItem());
             getContainerPanel().getOoDocument().setSectionMetadataAttributes(editSectionName, sectionMeta);
            
        }
        return true;
    }

    @Override
    public boolean postFullEdit() {
        return true;
    }

    @Override
    public boolean preFullInsert() {
        return true;
    }

    @Override
    public boolean processFullInsert() {
        return true;
    }

    @Override
    public boolean postFullInsert() {
        return true;
    }

    @Override
    public boolean preSelectEdit() {
        return true;
    }

    @Override
    public boolean processSelectEdit() {
        return true;
    }

    @Override
    public boolean postSelectEdit() {
        return true;
    }

    @Override
    public boolean preSelectInsert() {
        return true;
    }

    @Override
    public boolean processSelectInsert() {
        OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
        HashMap<String,String> sectionMeta = new HashMap<String,String>();
        String newSectionName = (getContainerPanel()).mainSectionName;
        sectionMeta.put("BungeniQuestionTo", (String) this.jComboBox1.getSelectedItem());
        ooDoc.setSectionMetadataAttributes(newSectionName, sectionMeta);
        //ooDoc.setSectionMetadataAttributes(TOOL_TIP_TEXT_KEY, metadataMap);
        return true;
    }

    @Override
    public boolean postSelectInsert() {
       return true;
    }

    @Override
    public boolean validateSelectedEdit() {
        return true;
    }

    @Override
    public boolean validateSelectedInsert() {
        return true;
    }

    @Override
    public boolean validateFullInsert() {
        return true;
    }

    @Override
    public boolean validateFullEdit() {
        return true;
    }

    @Override
    public void commonInitFields(){
          switch (getDialogMode()) {
            case TEXT_EDIT:
                return;
              default: return;
          }
    }
    
    @Override
    protected void initFieldsSelectedEdit() {
        return;
    }

    @Override
    protected void initFieldsSelectedInsert() {
        return;
    }

    @Override
    protected void initFieldsInsert() {
        return;
    }

    @Override
    protected void initFieldsEdit() {
        //connect fields to metadata... 
        this.jComboBox1.setSelectedItem(getSectionMetadataValue("BungeniQuestionTo"));
        return;
    }
    
    @Override
    public boolean doUpdateEvent(){        
        HashMap<String,String> selectionData = (getContainerPanel()).selectionData;        
        if (selectionData != null ) {
            if (selectionData.containsKey("QUESTION_TO"))
                this.jComboBox1.setSelectedItem (selectionData.get("QUESTION_TO"));
        }                
        return true;
    }

    // !+ADDED METHOD TO OBTAIN THE LIST OF MEMBERS (rm, feb 2012)
    // the list of members is used to populate the JComboBox
    // with all their details
    private String[] getMembersNames()
    {
        String[] members = null ;

        // initialise the client
        BungeniConnector client = null ;

        try
        {
            client = CommonConnectorFunctions.getDSClient() ;

            // get the members info
            List<Member> membersList = client.getMembers() ;

            // extract the members names and add them to the
            // string res
            members = new String[membersList.size()];
            int counter = 0 ;

            for(Member member : membersList)
            {
                members[counter] = member.getFirst() + " "
                        + member.getLast() ;
                counter ++ ;
            }
        } catch (IOException ex) {
            log.error("Error initializing the BungeniConnectorClient " + ex) ;
        }

        return members;
    }

    private ComboBoxModel getMembersModel()
    {
        DefaultComboBoxModel mModel = null ;

        // get the list of names of the members
        String [] members = getMembersNames() ;

        // set up model
        mModel = new DefaultComboBoxModel();

        for (String member : members)
        {
            mModel.addElement( (String) member);
        }

        return mModel;
    }
}