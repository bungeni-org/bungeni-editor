/*
 * QuestionerName.java
 *
 * Created on August 12, 2008, 1:53 PM
 */

package org.bungeni.editor.selectors.debaterecord.question;

import java.awt.Component;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.SwingWorker;
import org.bungeni.connector.client.BungeniConnector;
import org.bungeni.editor.selectors.BaseMetadataPanel;
import org.bungeni.editor.connectorutils.CommonConnectorFunctions;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.connector.element.Member ;

/**
 *
 * @author  undesa
 */
public class QuestionerNameAndURI extends BaseMetadataPanel {

    // create variable for logging
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(QuestionerNameAndURI.class.getName());

    /** Creates new form QuestionerName */
    public QuestionerNameAndURI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPersonURI = new javax.swing.JLabel();
        txtPersonURI = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        lblPersonURI.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/bungeni/editor/selectors/debaterecord/question/Bundle"); // NOI18N
        lblPersonURI.setText(bundle.getString("QuestionerNameAndURI.lblPersonURI.text")); // NOI18N
        lblPersonURI.setName("lbl_person_uri"); // NOI18N

        txtPersonURI.setEditable(false);
        txtPersonURI.setName("txt_person_uri"); // NOI18N
        txtPersonURI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPersonURIActionPerformed(evt);
            }
        });

        jComboBox1.setEditable(true);
        jComboBox1.setModel(getMembersModel());
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("QuestionerNameAndURI.jLabel1.text")); // NOI18N

        jLabel2.setText(bundle.getString("QuestionerNameAndURI.jLabel2.text")); // NOI18N

        jLabel3.setText(bundle.getString("QuestionerNameAndURI.loadingURI.text")); // NOI18N
        jLabel3.setName("loadingURI"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap())
            .addComponent(jComboBox1, 0, 264, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblPersonURI, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(txtPersonURI, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(254, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPersonURI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPersonURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(1, 1, 1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // on selection of a member from the JComboBox
        // the URI of the member should be displayed in the URI JTextField
        //
        String memberURI = null ;
        
        // get the selected MP name
        JComboBox membersList = (JComboBox) evt.getSource() ;
        String membersFullName = (String) membersList.getSelectedItem() ;

        // get the first and last names for the selected member
        String[] names = membersFullName.split("\\s");

        // get the URI for the member
        // and display it in the URI JTextField
        setMemberURI(names);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void txtPersonURIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPersonURIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPersonURIActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblPersonURI;
    private javax.swing.JTextField txtPersonURI;
    // End of variables declaration//GEN-END:variables
public String getPanelName() {
        return getName();
    }

    public Component getPanelComponent() {
        return this;
    }


    @Override
    public boolean doCancel() {
        return true;
    }

    @Override
    public boolean doReset() {
        return true;
    }

    @Override
    public boolean preFullEdit() {
        return true;
    }

    @Override
    public boolean processFullEdit() {
         String editSectionName = getContainerPanel().getEditSectionName();
        if (editSectionName.length() > 0 ) {
            HashMap<String,String> sectionMeta = new HashMap<String,String>();
            sectionMeta.put("BungeniQuestionBy", (String) this.jComboBox1.getSelectedItem());
            sectionMeta.put("BungeniQuestionByURI", this.txtPersonURI.getText());
            getContainerPanel().getOoDocument().setSectionMetadataAttributes(editSectionName, sectionMeta);
            
        }
        return true;
    }

    @Override
    public boolean postFullEdit() {
        return true;
    }

    @Override
    public boolean preFullInsert() {
        return true;
    }

    @Override
    public boolean processFullInsert() {
        return true;
    }

    @Override
    public boolean postFullInsert() {
        return true;
    }

    @Override
    public boolean preSelectEdit() {
        return true;
    }

    @Override
    public boolean processSelectEdit() {
        return true;
    }

    @Override
    public boolean postSelectEdit() {
        return true;
    }

    @Override
    public boolean preSelectInsert() {
        return true;
    }

    @Override
    public boolean processSelectInsert() {
        OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
        HashMap<String,String> sectionMeta = new HashMap<String,String>();
        String newSectionName = (getContainerPanel()).mainSectionName;
        sectionMeta.put("BungeniQuestionBy", (String) this.jComboBox1.getSelectedItem());
        sectionMeta.put("BungeniQuestionByURI", this.txtPersonURI.getText());
        ooDoc.setSectionMetadataAttributes(newSectionName, sectionMeta);        
        return true;
    }

    @Override
    public boolean postSelectInsert() {
       return true;
    }

    @Override
    public boolean validateSelectedEdit() {
        return true;
    }

    @Override
    public boolean validateSelectedInsert() {
        return true;
    }

    @Override
    public boolean validateFullInsert() {
        return true;
    }

    @Override
    public boolean validateFullEdit() {
        return true;
    }

        @Override
    protected void initFieldsSelectedEdit() {
        return;
    }

    @Override
    protected void initFieldsSelectedInsert() {
        return;
    }

    @Override
    protected void initFieldsInsert() {
        return;
    }

    @Override
    protected void initFieldsEdit() {
        // !+ (rm, feb 2012) -  the questioner JTextField has now been replaced
        // by a JComboBox with a list of all the selected members
        // this.txtPersonName.setText(this.getSectionMetadataValue("BungeniQuestionBy"));
        this.jComboBox1.setSelectedItem(this.getSectionMetadataValue("BungeniQuestionBy"));
        this.txtPersonURI.setText(this.getSectionMetadataValue("BungeniQuestionByURI"));
        return;
    }

    // !+ADDED METHOD TO OBTAIN THE LIST OF MEMBERS (rm, feb 2012)
    // the list of members is used to populate the JComboBox
    // with all their details
    private String[] getMembersNames()
    {
        String[] members = null ;

        // initialise the client
        BungeniConnector client = null ;

        try
        {
            client = CommonConnectorFunctions.getDSClient() ;

            // get the members info
            List<Member> membersList = client.getMembers() ;

            // extract the members names and add them to the
            // string res
            members = new String[membersList.size()];
            int counter = 0 ;

            for(Member member : membersList)
            {
                members[counter] = member.getFirst() + " "
                        + member.getLast() ;
                counter ++ ;
            }
        } catch (IOException ex) {
            log.error("Error initializing the BungeniConnectorClient " + ex) ;
        }
        
        return members; 
    }

    private ComboBoxModel getMembersModel()
    {
        DefaultComboBoxModel mModel = null ;

        // get the list of names of the members
        String [] members = getMembersNames() ;

        // set up model
        mModel = new DefaultComboBoxModel();

        for (String member : members)
        {
            mModel.addElement( (String) member);
        }
        
        return mModel;
    }

    // !+ BUNGENI_CONNECTOR (rm, jan 17-2012) - editing this method to ensure
    // that it uses the Bungeni Connector REST API rather than trying to connect
    // to registry db
    //
    // this method obtains the last name, first name and URI for a currently
    // in focus person in a dialog
   @Override
    public boolean doUpdateEvent(){

       // retrieve the URI for the perosn asking the question
       String questionFrom = (getContainerPanel()).selectionData.get("QUESTION_FROM");

       BungeniConnector client = null;
        try {
            // initialize the data store client
            client = CommonConnectorFunctions.getDSClient();

            // get the member info from the motions table
            // using the client
            List<Member> membersList = client.getMembers();

            // for each of the motions, check if the URI is the one
            // one we are looking for and if it is, then get the first name,
            // last name and URI and set these in the text fields
            for (int i = 0; i < membersList.size(); i++) {
                Member member = membersList.get(i);

                if ( member.getUri().equals( questionFrom.trim() ))
                {
                    // get the full name for the member
                    String fullName = member.getFirst() + " "
                        + member.getLast() ;

                    // add the first name, last name & URI to the
                    // "Person Name" in the "Add Motions" dialog
                    // this.txtPersonName.setText(fullName);
                    this.jComboBox1.setSelectedItem(fullName);
                    this.txtPersonURI.setText(questionFrom);

                    // no need to continue looping
                    break;
                }
            }

        } catch (IOException ex) {
            log.error("Error initializing the BungeniConnectorClient " + ex) ;
        }
       
        // !+ BUNGENI_CONNECTOR (rm, 17 jan 2012) - this code does not use the
        // BungeniConnector and has been deprecated
        /**
        HashMap<String,String> registryMap = BungeniRegistryFactory.fullConnectionString();  
        BungeniClientDB dbInstance = new BungeniClientDB(registryMap);
        HashMap<String,String> selectionData = (getContainerPanel()).selectionData;
        if (selectionData == null) return true;
        if (!selectionData.containsKey("QUESTION_FROM")) return true;
        String questionFrom = (getContainerPanel()).selectionData.get("QUESTION_FROM");
        dbInstance.Connect();
        QueryResults rs = dbInstance.QueryResults(GeneralQueryFactory.Q_FETCH_PERSON_BY_URI(questionFrom));
        dbInstance.EndConnect();
            String fullName = "";
            if (rs.hasResults()) {
                
                String[] firstName = rs.getSingleColumnResult("FIRST_NAME");
                String[] lastName = rs.getSingleColumnResult("LAST_NAME");
                if (firstName != null )
                    fullName = firstName[0];
                if (lastName != null ) 
                    fullName += " " + lastName[0];
            }

        this.txtPersonName.setText(fullName);
        this.txtPersonURI.setText(questionFrom);
        **/
       
        return true;
    }

   /**
    * This method uses the names of the member to obtain the 
    * URI for the specific member. This URI is then inserted into
    * the txtPersonURI textfield
    *
    * !!!! @TODO : what if the member names are not unique !!!!
    * 
    * @param names : the first+" "+last name for a member
    * @return
    */
    private void setMemberURI(final String[] names) {
    
        SwingWorker getMemberURI = new SwingWorker<String, Void>() {
            String memberURI = null ;
            
            @Override
            protected String doInBackground() throws Exception {
                String uri = null ;

                // display message
                jLabel3.setText("Fetching URI...");
                
                // initialise the BungeniConnector client
                BungeniConnector client = null ;

                // initialize the data store client
                client = CommonConnectorFunctions.getDSClient();

                // get the members
                List<Member> members = client.getMembers() ;

                // loop through & obtain the member whose
                // names are as in the args
                for( Member member : members )
                {
                    String firstName = names[0].trim() ;
                    String lastName = names[1].trim() ;

                    if(member.getFirst().trim().equals(firstName) &&
                            member.getLast().trim().equals(lastName) )
                    {
                        // get the member's uri
                        uri = member.getUri() ;
                        break ;
                    }
                }

                return uri ;
            }
            
            @Override
            public void done()
            {
                try {
                    // get the member URI and add it to the
                    // URI text field
                    memberURI = (String) get();
                    txtPersonURI.setText(memberURI);

                    jLabel3.setText("");
                    
                } catch (InterruptedException ex) {
                    log.error("Error obtaining member URI: " + ex);
                } catch (ExecutionException ex) {
                    log.error("Error obtaining member URI: " + ex);
                }
            }
        };

        // get the member's URI
        getMemberURI.execute();
    }
}
