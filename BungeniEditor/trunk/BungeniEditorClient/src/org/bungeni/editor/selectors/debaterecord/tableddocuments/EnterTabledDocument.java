
package org.bungeni.editor.selectors.debaterecord.tableddocuments;

import com.sun.star.beans.PropertyVetoException;
import com.sun.star.beans.UnknownPropertyException;
import com.sun.star.beans.XPropertySet;
import com.sun.star.lang.IllegalArgumentException;
import com.sun.star.lang.WrappedTargetException;
import com.sun.star.text.XText;
import com.sun.star.text.XTextViewCursor;
import java.awt.Component;
import java.util.Date;
import java.util.ResourceBundle;
import org.bungeni.editor.selectors.BaseMetadataPanel;
import org.bungeni.utils.BungeniEditorProperties;
import org.bungeni.utils.BungeniEditorPropertiesHelper;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.ooo.ooQueryInterface;

/**
 *
 * @author Ashok Hariharan
 */
public class EnterTabledDocument extends BaseMetadataPanel {
private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(EnterTabledDocument.class.getName());
 private static final ResourceBundle bundle = ResourceBundle.getBundle("org/bungeni/editor/selectors/debaterecord/tableddocuments/Bundle");


private static final String __URI_TO_TABLED_DOCUMENT__ = bundle.getString("URI_TABLED_DOCUMENTS")  ;
    /** Creates new form EnterTabledDocument */
    public EnterTabledDocument() {
        super();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDocURI = new javax.swing.JTextField();
        lblDocURI = new javax.swing.JLabel();
        lblDocDate = new javax.swing.JLabel();
        txtDocDate = new org.jdesktop.swingx.JXDatePicker();

        txtDocURI.setFont(new java.awt.Font("DejaVu Sans", 0, 10));

        lblDocURI.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        lblDocURI.setText("Document URI");

        lblDocDate.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        lblDocDate.setText("Document Date");

        txtDocDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDocURI, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDocDate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDocDate, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addComponent(txtDocURI, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblDocURI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDocURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(lblDocDate, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDocDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDocDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDocDate;
    private javax.swing.JLabel lblDocURI;
    private org.jdesktop.swingx.JXDatePicker txtDocDate;
    private javax.swing.JTextField txtDocURI;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void initFieldsSelectedEdit() {
       return;
    }

    @Override
    protected void initFieldsSelectedInsert() {
       return;
    }

    @Override
    protected void initFieldsInsert() {
       return;
    }

    @Override
    protected void initFieldsEdit() {
       return;
    }

    @Override
    public String getPanelName() {
       return "EnterTabledDocument";
    }

    @Override
    public Component getPanelComponent() {
       return this;
    }

    @Override
    public boolean preFullEdit() {
        return true;
    }

    @Override
    public boolean processFullEdit() {
        return true;
    }

    @Override
    public boolean postFullEdit() {
        return true;
    }

    @Override
    public boolean preFullInsert() {
        return true;
    }

    @Override
    public boolean processFullInsert() {
        return true;
    }

    @Override
    public boolean postFullInsert() {
        return true;
    }

    @Override
    public boolean preSelectEdit() {
        return true;
    }

    @Override
    public boolean processSelectEdit() {
        return true;
    }

    @Override
    public boolean postSelectEdit() {
        return true;
    }

    @Override
    public boolean preSelectInsert() {
        return true;
    }

    private String getDocDate(){
        String docDate = "";
        try {
         Date docDateValue = this.txtDocDate.getDate();
         docDate = BungeniEditorPropertiesHelper.getMetadataDateFormat().format(docDateValue);
        } catch (Exception ex) {
            log.error("getDocDate", ex);
        }
        return docDate;
    }

    private void markupLink(){
        try {
        //it will always return a single selection
            OOComponentHelper ooDocument = getContainerPanel().getOoDocument();
            String docURI = this.txtDocURI.getText();
            String docDate = getDocDate();
            XTextViewCursor viewCursor = ooDocument.getViewCursor();
            XText xCursorText = viewCursor.getText();
            XPropertySet xCurProps = ooQueryInterface.XPropertySet(viewCursor);
            xCurProps.setPropertyValue("HyperLinkURL", BungeniEditorProperties.ODF_URI_PREFIX + docURI);
            xCurProps.setPropertyValue("HyperLinkName",__URI_TO_TABLED_DOCUMENT__);
            //AH-17-01-11 -- the below isnt required since the text has already been selected !!
            //xCursorText.insertString(viewCursor,viewCursor.getString(), true);
        } catch (IllegalArgumentException ex) {
                 log.error("markupLink : " + ex.getMessage(),ex);
        } catch (UnknownPropertyException ex) {
                log.error("markupLink : " + ex.getMessage(),ex);
        } catch (PropertyVetoException ex) {
                log.error("markupLink : " + ex.getMessage(),ex);
        }  catch (WrappedTargetException ex) {
                log.error("markupLink : " + ex.getMessage(),ex);
        }
    }


    @Override
    public boolean processSelectInsert() {
        markupLink();
        return true;
    }

    @Override
    public boolean postSelectInsert() {
        return true;
    }

    @Override
    public boolean validateSelectedEdit() {
        return true;
    }

    @Override
    public boolean validateSelectedInsert() {
         boolean bState = true;
         String sDocDate = getDocDate();
         String sDocURI = this.txtDocURI.getText().trim();
         if (sDocURI.length() == 0 ) {
            this.addErrorMessage(txtDocURI, "Please enter the URI for the document");
            bState = false;
        }
        if (sDocDate.length() == 0) {
            this.addErrorMessage(txtDocDate, "Please enter the Date for the document");
            bState = false;
        }
        return bState;
    }

    @Override
    public boolean validateFullInsert() {
        return true;
    }

    @Override
    public boolean validateFullEdit() {
        return true;
    }

    @Override
    public boolean doCancel() {
                return true;
    }

    @Override
    public boolean doReset() {
        return true;
    }

}
