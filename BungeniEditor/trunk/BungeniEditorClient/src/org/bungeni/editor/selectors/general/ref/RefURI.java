
package org.bungeni.editor.selectors.general.ref;

import com.sun.star.container.NoSuchElementException;
import com.sun.star.container.XEnumeration;
import com.sun.star.lang.IllegalArgumentException;
import com.sun.star.lang.WrappedTargetException;
import com.sun.star.rdf.RepositoryException;
import com.sun.star.rdf.URI;
import com.sun.star.rdf.XLiteral;
import com.sun.star.rdf.XNamedGraph;
import com.sun.star.rdf.XURI;
import java.awt.Component;
import org.bungeni.editor.actions.routers.CommonRouterActions.TypeCreationState;
import org.bungeni.editor.metadata.ActMainMetadataModel;
import org.bungeni.editor.selectors.BaseMetadataPanel;
import org.bungeni.extutils.CommonUIFunctions;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.ooo.rdf.RDFConstants;
import org.bungeni.ooo.rdf.RDFMetadata;

/**
 *
 * @author  undesa
 */
public class RefURI extends  BaseMetadataPanel {
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(RefURI.class.getName());
 private static ActMainMetadataModel docMetaModel = new ActMainMetadataModel();
    /** Creates new form PersonSelector */
    public RefURI() {
        super();
        initComponents();
        CommonUIFunctions.compOrientation(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_RefURI = new javax.swing.JLabel();
        txt_RefURI = new javax.swing.JTextField();

        setName("Speech By"); // NOI18N

        lbl_RefURI.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/bungeni/editor/selectors/general/ref/Bundle"); // NOI18N
        lbl_RefURI.setText(bundle.getString("RefURI.lbl_RefURI.text")); // NOI18N

        txt_RefURI.setFont(new java.awt.Font("DejaVu Sans", 0, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_RefURI, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbl_RefURI, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbl_RefURI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_RefURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

      public String getPanelName() {
        return getName();
    }

    public Component getPanelComponent() {
        return this;
    }

    private boolean validateRefURI() {
        String sRefURI = this.txt_RefURI.getText();
        if (sRefURI.trim().length() == 0) {
            this.addErrorMessage(this.txt_RefURI, "Please enter Ref URI");
            return false;
        }
        return true;
    }


    @Override
    public boolean doCancel() {
        return true;
    }

    @Override
    public boolean doReset() {
        return true;
    }

    @Override
    public boolean preFullEdit() {
        return true;
    }

    @Override
    public boolean processFullEdit() {
        //!+FIX_THIS(ah, may-2012) The edit mode metadata processing needs to be fixed.
        return true;
    }

    @Override
    public boolean postFullEdit() {
        return true;
    }

    @Override
    public boolean preFullInsert() {
        return true;
    }

    @Override
    public boolean processFullInsert() {
        return true;
    }

    @Override
    public boolean postFullInsert() {
        return true;
    }

    @Override
    public boolean preSelectEdit() {
        return true;
    }

    @Override
    public boolean processSelectEdit() {
        return true;
    }

    @Override
    public boolean postSelectEdit() {
        return true;
    }

    @Override
    public boolean preSelectInsert() {
        return true;
    }

    private int getNumberOfReferences() {
        RDFMetadata rdfMeta = getContainerPanel().getOoDocument().getRDFInstance();
        int numberOfReferences = 0;
        try {
            XNamedGraph xGraph = rdfMeta.getDocumentMetadataGraph();
            XLiteral xLiteral = rdfMeta.makeEscapedLiteral("ref");
            XURI xURI = URI.create(getContainerPanel().getOoDocument().getComponentContext(), 
                    RDFConstants.RDF_META_NAMESPACE + "/" + RDFMetadata.RDF_META_ROOT + "/BungeniInlineType"
                    );
            XEnumeration xEnum = xGraph.getStatements(null, xURI, xLiteral);
            while (xEnum.hasMoreElements()){
                numberOfReferences++;
                Object next = xEnum.nextElement();
            }
        } catch (WrappedTargetException ex) {
            log.error("getNumberOfReferences", ex);
        } catch (IllegalArgumentException ex) {
            log.error("getNumberOfReferences", ex);
        } catch (RepositoryException ex) {
            log.error("getNumberOfReferences", ex);
        }  catch (NoSuchElementException ex) {
            log.error("getNumberOfReferences", ex);
        }
        
        
        return numberOfReferences;
    }
    
    @Override
    public boolean processSelectInsert() {
          OOComponentHelper ooDoc = getContainerPanel().getOoDocument();
          this.docMetaModel.setup();
          docMetaModel.loadModel(ooDoc);
          
          
          final String strHref = this.txt_RefURI.getText();
          String documentId = docMetaModel.getItem("BungeniMainDocID"); // get the document id from somewhere ... 
          Integer nextReferenceId = getNumberOfReferences() + 1;
          TypeCreationState tcs = getContainerPanel().initInlineType();
          if (tcs.propsMap != null ) {
             tcs.propsMap.put("BungeniRefID",  "P" + documentId + "_" + nextReferenceId );
             tcs.propsMap.put("BungeniRefURI", strHref );
             ooDoc.setSelectedTextAttributes(tcs.propsMap);
          }
        return true;
    }

    @Override
    public boolean doUpdateEvent(){
        return true;
    }
    @Override
    public boolean postSelectInsert() {
       return true;
    }

    @Override
    public boolean validateSelectedEdit() {
        return validateRefURI();
    }

    @Override
    public boolean validateSelectedInsert() {
        return validateRefURI();
    }

    @Override
    public boolean validateFullInsert() {
        return validateRefURI();
    }

    @Override
    public boolean validateFullEdit() {
        return validateRefURI();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbl_RefURI;
    private javax.swing.JTextField txt_RefURI;
    // End of variables declaration//GEN-END:variables
    @Override
    protected void initFieldsSelectedEdit() {
        return;
    }

    @Override
    protected void initFieldsSelectedInsert() {
        return;
    }

    @Override
    protected void initFieldsInsert() {
        return;
    }

    @Override
    protected void initFieldsEdit() {
        //!+FIX_THIS (ah, may-2012) Fix this for inline metadata editing
        //this.txt_RefURI.setText(getSectionMetadataValue("BungeniRefURI"));
        return;
    }
}
