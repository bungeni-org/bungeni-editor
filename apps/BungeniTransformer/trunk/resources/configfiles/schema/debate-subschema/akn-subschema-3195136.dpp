
	
		
		
		
		
		
	
<!-- ===================================================================== 
 	   Akoma Ntoso main schema
	   supported by Africa i-Parliaments, a project sponsored by United
	   Nations Department of Economic and Social Affairs
	   Copyright (C) Africa i-Parliaments


     	Release 12/10/2011 - Akoma Ntoso 2.0

	Automatically generated modular subversion from the full schema.
	Current subversion contains the following modules:

		debateDocs core toc advancedPreface delimiters authorialNote

	Please consult http://www.akomantoso.org/subversions for more information.

     technical supervision Fabio Vitali - University of Bologna
     legal domain supervision Monica Palmirani - University of Bologna
        
     The present schema uses systematically XML design patterns as
     described in http://www.xmlpatterns.com/
     A few of them are explicitly mentioned, when their use or approach
     was not felt clear or natural enough. Others are just used without
     mentions.

     TERMS AND CONDITIONS
     
     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     ===================================================================== -->

<!TARGETNS          'http://www.akomantoso.org/2.0'>
<!TARGETNS  xml  'http://www.w3.org/XML/1998/namespace'>

<!-- =====================================================================

        Main element groups

     ===================================================================== -->

	
<!--- The group ANcontainers lists the elements that are containers and are specific to the Akoma Ntoso debate vocabulary -->
<!ENTITY @@ ANcontainers    "(speech | question | answer | other | scene | narrative | summary)" >


<!--- The group ANblock lists the elements that are blocks and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANblock         "(blockList | toc )" >
<!--- The group ANinline lists the elements that are inline and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANinline        "(ref  | remark | recordedTime | vote | outcome   )" >
<!--- The group ANtitleInline lists the elements that are inline, are specific to the Akoma Ntoso vocabulary, and should only be used within the title element -->
<!ENTITY @@ ANtitleInline   "(docType | docTitle | docNumber | docProponent | docDate | legislature | session | docPurpose|docCommittee|docIntroducer|docStage|docStatus|docJurisdiction|docketNumber)" >




<!--- The group ANmarker lists the elements that are markers and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANmarker        "(noteRef |  eol | eop)" >


<!ENTITY @@ ANpopup          "(authorialNote )" >

	
<!--- The group HTMLcontainers lists the elements that are containers and were inherited from the HTML vocabulary -->
<!ENTITY @@ HTMLcontainers    "( div )" >
<!--- The group HTMLblock lists the elements that are blocks and were inherited from the HTML vocabulary -->
<!ENTITY @@ HTMLblock         "( p)" >
<!--- The group HTMLinline lists the elements that are inline and were inherited from the HTML vocabulary -->
<!ENTITY @@ HTMLinline        "( span)" >
	




	
<!--- The group speechSection lists the structures that should contain speeches -->
<!ENTITY @@ speechSection     "(administrationOfOath|rollCall|prayers|oralStatements|writtenStatements|personalStatements|
                                   ministerialStatements|resolutions|nationalInterest|declarationOfVote|communication|
                                   petitions|papers|noticesOfMotion|questions|address|proceduralMotions|pointOfOrder| 
                                   adjournment|debateSection)">                                   



<!--- The group containerElements lists all the elements that are containers -->
<!ENTITY @@ containerElements "(@@speechSection; | @@HTMLcontainers; )">
<!--- The group blockElements lists all the elements that are blocks -->
<!ENTITY @@ blockElements     "(@@ANblock;      | @@HTMLblock;       )">
<!--- The group inlineElements lists all the elements that are inline -->
<!ENTITY @@ inlineElements    "(@@ANinline;     | @@HTMLinline;   | @@ANtitleInline;          )">

<!--- The group popupElements lists all the elements that are popups -->
<!ENTITY @@ popupElements    "(@@ANpopup;  )">

<!--- The group markerElements lists all the elements that are markers -->
<!ENTITY @@ markerElements    "(@@ANmarker;       )">

<!--- The group inlineCM is the content model of blocks and inlines, and is composed of all the inlines and all the markers -->
<!ENTITY @@ inlineCM          "(@@inlineElements; | @@markerElements; | @@popupElements;)">

<!-- =====================================================================

        Attribute groups

     ===================================================================== -->
     
<!--- The attribute alt is used to specify, when the element contains an alternative version of some content, the id of the main element which this element is an alternative copy of -->
<!ENTITY ## alt         "alternativeTo         #ANYURI        #IMPLIED" >
<!--- The attribute name is used to give a name to all generic elements -->
<!ENTITY ## name         "name         #STRING        #REQUIRED" >
<!--- The attribute number is used to specify a number in the publication of the document -->
<!ENTITY ## number       "number       #INTEGER        #REQUIRED" >
<!--- The attribute source links to the agent (person, organization) providing the specific annotation or markup -->
<!ENTITY ## source       "source       #ANYURI        #REQUIRED" >
<!--- The attribute date is used to give a normalized value for a date according to the XSD syntax YYYY-MM-DD -->
<!ENTITY ## date         "date         #DATE          #REQUIRED" >
<!--- The attribute time is used to give a normalized value for a time according to the XSD syntax HH:MM:SS -->
<!ENTITY ## time         "time         #TIME          #REQUIRED" >
<!--- The attribute href is used to specify an internal or external destination for a reference, a citation, an access to the ontology or a hypertext link. In elements using this attribute definition the href attribute is required -->
<!ENTITY ## link         "href         #ANYURI        #REQUIRED" >
<!--- The attribute href is used to specify an internal or external destination for a reference, a citation, an access to the ontology or a hypertext link. In elements using this attribute definition the href attribute is optional -->
<!ENTITY ## linkopt      "href         #ANYURI        #IMPLIED" >
<!--- The attribute value is used to specify a value for metadata elements. In elements using this attribute definition the value attribute is required -->
<!ENTITY ## value        "value        #STRING        #REQUIRED" >
<!--- The attribute value is used to specify a value for metadata elements. In elements using this attribute definition the value attribute is optional -->
<!ENTITY ## optvalue     "value        #STRING        #IMPLIED" >

<!--- These attributes are used in speeches to identify actors and roles of speeches. In particular, attribute 'by' identifies the speaker, optional attribute 'as' identifies the role under which the speaker is speaking, and  optional attribute to identifies the addressee of the speech. All of them are references to person or organization elements in the references section -->
<!ENTITY ## speechAtts   "by           #ANYURI        #REQUIRED 
                          as           #ANYURI        #IMPLIED
                          to           #ANYURI        #IMPLIED ">
<!ENTITY ## voteAtts     "by           #ANYURI        #REQUIRED 
                          as           #ANYURI        #IMPLIED
                          choice       #ANYURI        #IMPLIED ">

<!--- These attributes are used in metadata to propose visible representations of the metadata itself. Both a full visualization (attribute showAs) and an abbreviated one (attribute shortForm) can be specified -->
<!ENTITY ## show         "showAs       #STRING        #REQUIRED  
                          shortForm    #STRING        #IMPLIED">
<!--- The period attribute is used in versioned content and metadata elements to indicate a time interval in which they were in force, in efficacy, or in any other type of interval as specified in the corresponding temporalGroup.  -->
<!ENTITY ## period "
    period           #ANYURI        #IMPLIED"
>
<!--- These attributes are those already defined in attribute list "period", plus the attribute status, that allows to specify the status of the piece of text it wraps.  -->
<!ENTITY ## enactment "
    ##period;
    status     #statusType;  #IMPLIED
">
<!--- These attributes are used by notes, both authorial and editorial -->
<!ENTITY ## notes "
		                      marker    #STRING         #IMPLIED
                          placement #placementType; #IMPLIED	
                          placementBase #ANYURI     #IMPLIED	
">

<!--- These attributes are used in the analysis to allow manifestation editors to specify whether the analysis is complete and/or ignored in the text -->
<!ENTITY ## modifiers "
    exclusion  #BOOLEAN #IMPLIED
    incomplete #BOOLEAN #IMPLIED
">
<!--- The attribute role is used to identify the role of an individual mentioned in the text. It is a reference to a TLCRole element in the references section -->
<!ENTITY ## role "
    as #ANYURI #IMPLIED
">
<!--- The attribute actor is used to identify the actor of a step of a workflow of the document. It is a reference to a TLCPerson or TLCOrganization element in the references section -->
<!ENTITY ## actor "
    actor #ANYURI #IMPLIED
">

	

	
<!--- These attributes are used to specify class, style and title of the element, exactly as in HTML -->
<!ENTITY ## HTMLattrs    "class        #STRING      #IMPLIED    
                          style        #STRING      #IMPLIED
                          title        #STRING      #IMPLIED">
<!--- This attributes identify the element in an absolute manner. In elements using this attribute definition the id attribute is required. The evolvingId is used to mark the identifier that the structure would have in a static situation, and is usually identical to id. -->
<!ENTITY ## idreq        "id           #ID           #REQUIRED
                             evolvingId   #NMTOKEN           #IMPLIED  ">
<!--- These attributes identify the element in an absolute manner. In elements using this attribute definition the id attribute is optional. The evolvingId is used to mark the identifier that the structure would have in a static situation, and is usually identical to id. -->
<!ENTITY ## idopt        "id           #ID           #IMPLIED
                             evolvingId   #NMTOKEN           #IMPLIED  ">

<!--- This attribute creates a connection between the element and an element of the Akoma Ntoso ontology to which it refers. In elements using this attribute definition the refersTo attribute is required -->
<!ENTITY ## refersreq    "refersTo           #ANYURI         #REQUIRED" >
<!--- This attribute creates a connection between the element and an element of the Akoma Ntoso ontology to which it refers. In elements using this attribute definition the refersTo attribute is optional -->
<!ENTITY ## refers       "refersTo           #ANYURI         #IMPLIED" >
<!--- This attribute specifies the human language in which the content of the element is expressed. Values are taken from the RFC 4646. xml:lang is a reserved attribute of XML, and cannot be used for any other purpose than this one.  -->
<!ENTITY ## xmllang       "xml:lang           #language;         #IMPLIED" >

<!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition the refersTo attribute is optional but the id attribute is required -->
<!ENTITY ## corereq      "##HTMLattrs; ##enactment; ##idreq; ##refers; ##xmllang; ##alt;" >
<!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition both the refersTo attribute and the id attribute are required -->
<!ENTITY ## corereqreq   "##HTMLattrs; ##enactment; ##idreq; ##refersreq; ##xmllang; ##alt;" >
<!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition both the refersTo attribute and the id attribute are optional -->
<!ENTITY ## coreopt      "##HTMLattrs; ##enactment; ##idopt; ##refers; ##xmllang; ##alt;" >

<!-- =====================================================================

        Simple types (data values)

     ===================================================================== -->
<!--- This attribute specifies the human language in which the document the element refers to is expressed. Values are taken from the RFC 4646.  -->
<!ENTITY # language           "#STRING" >
<!--- This is the list of allowed values for a yes/no attribute   -->
<!ENTITY # yesNoType    "#STRING(yes|no)" >
<!--- This is the list of allowed values for the contains attribute   -->
<!ENTITY # versionType    "#STRING(originalVersion|singleVersion|multipleVersions)" >
<!--- This is the list of allowed values for the placement attribute of notes  -->
<!ENTITY # placementType    "#STRING(side|left|right|bottom|inline)" >


<!--- This is the list of allowed values for the status attribute   -->
<!ENTITY # statusType     "#STRING(omissis|repealed|suspended|editorial|ignore|translated|edited|verbatim)">

<!--- This is the list of allowed values for the type attribute of the remark element  -->
<!ENTITY # remarkType     "#STRING(sceneDescription|phenomenon|caption|translation)">
<!--- This is the list of allowed values for the type attribute of the recordedTime element  -->
<!ENTITY # timeType       "#STRING(startEvent|endEvent)">




	
<!-- =====================================================================

        Complex types (markup structures)

     ===================================================================== -->

<!--- The complex type basehierarchy is not used by any element, but is derived by other types to contain the basic structure of hierarchical elements   -->
<!ENTITY @ basehierarchy     "(num?, heading?, subheading?)" >

<!--- The complex type althierarchy is used by most or all the hierarchical elements of documents that are not act-like. -->
<!ENTITY @ althierarchy      "@basehierarchy;, (@@containerElements;  | @@ANcontainers; | @@blockElements;)*" "##corereq;">
<!--- the complex type blocksreq defines the content model and attributes shared by all containers. Here the id attribute is required -->
<!ENTITY @ blocksreq         "(@@blockElements;)+" "##corereq;">
<!--- the complex type blocksopt defines the content model and attributes shared by all containers. Here the id attribute is optional -->
<!ENTITY @ blocksopt         "(@@blockElements;)+" "##coreopt;">
<!--- the complex type inline defines the content model and attributes shared by all blocks and inlines. Here the id attribute is optional -->
<!ENTITY @ inline            "(#PCDATA | @@inlineCM;)*" "##coreopt;">
<!--- the complex type inlinereq defines the content model and attributes shared by all blocks and inlines. Here the id attribute is required -->
<!ENTITY @ inlinereq         "(#PCDATA | @@inlineCM;)*" "##corereq;">
<!--- the complex type inlinereq defines the content model and attributes shared by all blocks and inlines. Here the id attribute is required and also the refersTo is required -->
<!ENTITY @ inlinereqreq      "(#PCDATA | @@inlineCM;)*" "##corereqreq;">

<!--- the complex type markerreq defines the content model and attributes shared by all marker elements. Here the id attribute is required -->
<!ENTITY @ markerreq         "" "##corereq;">
<!--- the complex type markeropt defines the content model and attributes shared by all marker elements. Here the id attribute is optional -->
<!ENTITY @ markeropt         "" "##coreopt;">
<!--- the complex type metareq defines the content model and attributes shared by all metadata elements. Here the id attribute is required -->
<!ENTITY @ metareq           "" "##idreq;">
<!--- the complex type metaopt defines the content model and attributes shared by all metadata elements. Here the id attribute is optional -->
<!ENTITY @ metaopt           "" "##idopt;">

<!--- the complex type maincontent is used by container elements that can contain basically any other Akoma Ntoso structure -->
<!ENTITY @ maincontent       "( @@blockElements; | @@containerElements; )+" "##coreopt;" >

	
<!--- the complex type speechType defines the content model and attributes shared by all speech elements. Here the id attribute is optional -->
<!ENTITY @ speechType        "@basehierarchy;, (from?, (@@blockElements;)+)" "##coreopt; ##speechAtts;" >


<!--- The complex type itemType is similar to a hierarchical element, but is isolated and does not belong to a full hierarchy. -->
<!ENTITY @ itemType          "@basehierarchy;, (@@blockElements;)+"             "##corereq;">
<!--- the complex type referenceType defines the empty content model and the list of attributes for metadata elements in the references section -->
<!ENTITY @ referenceType     ""                            "##idreq; ##link; ##show;" >
<!--- the complex type anyOtherType defines an open content model for elements that may use elements from other namespaces. -->
<!ENTITY @ anyOtherType      "ANY{##other}"                "##idopt; ##linkopt;" >                 

<!-- =====================================================================

        Root element
        Comment: One generic root element contains all document elements
        Pattern: Universal Root 
        Reference: http://www.xmlpatterns.com/UniversalRootMain.shtml

     ===================================================================== -->






<!--- the group debateDocs specifies all the document types that are related to debates -->
<!ENTITY @@ debateDocs       "(debateReport | debate)" >

		
<!--- the type documentType lists all the document types that are managed by Akoma Ntoso -->
	<!ENTITY @@ documentType      "(	 
						
						@@debateDocs; |
						
						 doc)">

  

<!-- =====================================================================

        Document elements
        Comment: All document elements share just two content models
        Pattern: Consistent Element Set
        Reference: http://www.xmlpatterns.com/ConsistentElementSetMain.shtml

     ===================================================================== -->

<!--- the complex type akomaNtosoType is the type for the root element in Akoma Ntoso. -->
<!ENTITY @ akomaNtosoType    "((@@documentType;), components?)" >
<!--- the element akomaNtoso is the root element of all document types in Akoma Ntoso. It follows the pattern Universal Root (http://www.xmlpatterns.com/UniversalRootMain.shtml) -->
<!ROOT     akomaNtoso        @akomaNtosoType; >

	
<!--- the type openStructure specifies the overall content model of all the document types that do not have a specific and peculiar structure -->
<!ENTITY @ openStructure     "(meta, 
                                 coverPage?,
                                 preface?,
                                 preamble?, 
                                 mainContent, 
                                 conclusions?, 
                                 attachments?)" 
                                 "##name; contains #versionType; 'originalVersion'">

<!--- Element doc is used for descriving the structure and content of any other rdocument that is not included in the list of document explicitly managed by Akoma Ntoso -->
<!ELEMENT doc           @openStructure; >
<!--- the element mainContent is the container of the main part of all other document types -->
<!ELEMENT mainContent     @maincontent; >

	




<!--- the type debateStructure specifies the overall content model of the document types that describe debates -->
<!ENTITY @ debateStructure     "(meta, 
                                   coverPage?,
                                   preface?,
                                   debateContent, 
                                   conclusions?, 
                                   attachments?)" 
                                 " contains #versionType; 'originalVersion'">

<!--- Element debateReport is used for descriving the structure and content of a report -->
<!ELEMENT debateReport        @openStructure; >
<!--- Element debate is used for descriving the structure and content of a debat record -->
<!ELEMENT debate  @debateStructure; >

<!--- the element debateContent is the container of the main hierarchy of a debate -->
<!ELEMENT debateContent          (@@speechSection;)+ >
<!ATTLIST debateContent          ##coreopt; >



	

	



		
<!--- the complex type basicopt defines the content model and attributes used by basic containers such as coverPage and conclusions. Here the id attribute is optional -->
<!ENTITY @ basicopt         "(@@blockElements;  )+" "##coreopt;">
<!--- the element coverPage is used as a container of the text that acts as a cover page -->
<!ELEMENT coverPage    @basicopt; >
<!--- the complex type preambleopt defines the content model and attributes used by preambles. Here the id attribute is optional -->
<!ENTITY @ preambleopt         "(@@blockElements;  )+" "##coreopt;">
<!--- the element preamble is used as a container of the text that opens the main body of the document as a preamble -->
<!ELEMENT preamble    @preambleopt; >
<!--- the complex type prefaceopt defines the content model and attributes used by preface. Here the id attribute is optional -->
<!ENTITY @ prefaceopt         "(@@blockElements;  )+" "##coreopt;">
<!--- the element preface is used as a container of all prefacing material (e.g. headers, formulas, etc.) -->
<!ELEMENT preface     @prefaceopt; >
<!--- the element conclusion is used as a container of all concluding material (e.g. dates, signatures, formulas, etc.) -->
<!ELEMENT conclusions @basicopt; >
<!--- the element header is used as a container of all prefacing material of judgements (e.g. headers, formulas, etc.) -->
<!ELEMENT header      @blocksopt; >
<!--- the element attachments is used as a container of individual attachment elements -->
<!ELEMENT attachments (componentRef+) >
<!ATTLIST attachments ##coreopt; >
<!--- the element componentRef is a work- or expression-level reference (i.e., a URI) to another document that represents a component of the document not physically placed at the position specified. Actual document can either be external (e.g. in the package or even in a different position) or internal (within the components element) -->
<!ELEMENT componentRef  @referenceType; >






<!--- the element num is a heading element in a hierarchy that contains a number or any other ordered mechanism to identify the structure. -->
<!ELEMENT num           @inline; >
<!--- the element heading is a heading element in a hierarchy that contains a title or any other textual content to describe the structure. -->
<!ELEMENT heading       @inline; >
<!--- the element subheading is a heading element in a hierarchy that contains a subtitle or any other textual content to further describe the structure. -->
<!ELEMENT subheading    @inline; >
<!--- the element intro is a heading element in a hierarchy that contains paragraphs introducing one or more lower hierarchical elements. -->
<!ELEMENT intro    @blocksopt; >
<!--- the element wrap is a concluding element in a hierarchy that contains paragraphs wrapping up the preceding lower hierarchical elements. -->
<!ELEMENT wrap    @blocksopt; >

	


<!-- =====================================================================

        Elements for debates documents

     ===================================================================== -->

<!--- this element is a structural container for parts of a debates that contain the administration of an oath -->
<!ELEMENT administrationOfOath  @althierarchy; >

<!--- this element is a structural container for parts of a debates that contain a roll call of individuals -->
<!ELEMENT rollCall  @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain prayers -->
<!ELEMENT prayers  @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain oral statements by participants -->
<!ELEMENT oralStatements  @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain written statements by participants -->
<!ELEMENT writtenStatements  @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain written statements by participants -->
<!ELEMENT personalStatements  @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain written statements by participants -->
<!ELEMENT ministerialStatements  @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain resolutions -->
<!ELEMENT resolutions  @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain resolutions -->
<!ELEMENT nationalInterest  @althierarchy; >

<!--- this element is a structural container for parts of a debates that are relevant to the declaration of votes -->
<!ELEMENT declarationOfVote     @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain communications from the house -->
<!ELEMENT communication         @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to petitions -->
<!ELEMENT petitions             @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to the display of papers -->
<!ELEMENT papers                @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to the notices of motions -->
<!ELEMENT noticesOfMotion       @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to questions -->
<!ELEMENT questions             @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to addresses -->
<!ELEMENT address               @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to procedural motions -->
<!ELEMENT proceduralMotions     @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to points of order -->
<!ELEMENT pointOfOrder          @althierarchy; >
<!--- this element is a structural container for parts of a debates that contain adjournment notices -->
<!ELEMENT adjournment  @althierarchy; >


<!--- this element is a generic structural container for all other parts of a debates that are not explicitly supported with a named element -->
<!ELEMENT debateSection           @althierarchy; >
<!ATTLIST debateSection           ##name; >



<!--- the element speech is a container of a single speech utterance in a debate. Dialogs between speakers need a speech element each -->
<!ELEMENT speech              @speechType; >
<!--- the element question is a container of a single official question as proposed by an MP to a peson holding an official position -->
<!ELEMENT question            @speechType; >
<!--- the element answer is a container of a single official answer to a question -->
<!ELEMENT answer              @speechType; >
<!--- the element other is a container of parts of a debate that are not speeches, nor scene comments (e.g., lists of papers, etc.) -->
<!ELEMENT other               @blocksopt; >
<!--- the element scene is a container of descriptions of the scene elements happening in a given moment during a debate (e.g., applauses) -->
<!ELEMENT scene               @inline; >
<!--- the element narrative is a block element in a debate to mark description in the third person of events taking place in the meeting, e.g. "Mr X. takes the Chair" -->
<!ELEMENT narrative               @inline; >
<!--- the element summary is a block element in a debate to mark summaries of speeches that are individually not interesting (e.g.: "Question put and agreed to") -->
<!ELEMENT summary               @inline; >
<!--- the element from is a heading element in a debate that contains the name or role or a reference to the person doing the speech -->
<!ELEMENT from          @inline; >

<!--- the element vote is an inline that wraps either the name of the voter (when organized by choice) or the vote (when organized by name) in a voting report. -->
<!ELEMENT vote               @inline; >
<!ATTLIST vote 							##voteAtts; >
<!--- the element outcome is an inline that wraps the outcome of a vote -->
<!ELEMENT outcome               @inline; >





	
<!-- =====================================================================
    
    AN block elements
    Comment: the only AN-specific block are the table of content (TOC), 
    a structure containing toc items related to the various subparts of the 
    main document, the list item and the titled block
    
    ===================================================================== -->

<!--- the element list is used as a container of many individual item elements put in a list -->
<!ELEMENT blockList                (listIntroduction?, item+, listConclusion?) >
<!ATTLIST blockList                ##corereq; >
<!-- The element item is a container belonging to a list -->
<!ELEMENT item                @itemType; >
<!--- the element listIntroduction is an optional element of list before any item of the list itself.  -->
<!ELEMENT listIntroduction   @inline; >
<!--- the element listConclusion is an optional element of list after all items of the list itself.  -->
<!ELEMENT listConclusion   @inline; >



<!--- the element toc (Table of Content) is used as a container of many individual toc items -->
<!ELEMENT toc       (tocItem+) >
<!--- the element tocItem is a component of the table of content and contains header information about sections or parts of the rest of the document -->
<!ELEMENT tocItem   @inline; >
<!ATTLIST tocItem   ##link; level #INTEGER #REQUIRED >

	
   
   
<!-- =====================================================================

        AN inline elements
        Comment: AN-specific inline elements are connected to the 
        identification of elements that are corresponding to an inline 
        legal structure, regardless of their position in the document.

     ===================================================================== -->

<!--- the element docType is an inline element within preface to identify the string used by the document for its own type -->
<!ELEMENT docType      @inline; >
<!--- the element docTitle is an inline element within preface to identify the string used by the document for its own title -->
<!ELEMENT docTitle     @inline; >
<!--- the element docNumber is an inline element within preface to identify the string used by the document for its own number -->
<!ELEMENT docNumber    @inline; >
<!--- the element docProponent is an inline element within preface to identify the string used by the document for its proponent -->
<!ELEMENT docProponent @inline; >
<!--- the element docDate is an inline element within preface to identify the string used by the document for its own date(s). Documents with multiple dates may use multiple docDate elements. -->
<!ELEMENT docDate      @inline; >
<!ATTLIST docDate      ##date; >
<!--- the element legislature is an inline element within preface to identify the string used by the document for the legislature relative to the document. Use #refersTo to a TLCEvent to refer to the event of the specific legislature. -->
<!ELEMENT legislature      @inline; >
<!--- the element session is an inline element within preface to identify the string used by the document for the session of the legislature relative to the document. Use #refersTo to a TLCEvent to refer to the event of the specific session. -->
<!ELEMENT session      @inline; >


<!--- the element docPurpose is an inline element within preface to identify the string used by the document detailing its own purpose -->
<!ELEMENT docPurpose   @inline; >
<!--- the element docCommittee is an inline element within preface to identify the string used by the document detailing the committee within which the document originated -->
<!ELEMENT docCommittee   @inline; >
<!--- the element docIntroducer is an inline element within preface to identify the string used by the document detailing the individual introducing of the document -->
<!ELEMENT docIntroducer   @inline; >
<!--- the element docStage is an inline element within preface to identify the string used by the document detailing the stage in which the document sits -->
<!ELEMENT docStage   @inline; >
<!--- the element docStatus is an inline element within preface to identify the string used by the document detailing the status of the document -->
<!ELEMENT docStatus   @inline; >
<!--- the element docJurisdiction is an inline element within preface to identify the string used by the document detailing the jurisdiction of the document -->
<!ELEMENT docJurisdiction   @inline; >
<!--- the element docketNumber is an inline element within preface to identify the string used by the document for the number of the docket, case, file, etc which the document belongs to -->
<!ELEMENT docketNumber    @inline; >

	




<!--- the element signature is an inline element within conclusions to identify where the document defines one of the signatures -->
<!ELEMENT signature          @inline; >




<!--- the element ref is an inline element containing a legal references (i.e. a reference to a document with legal status and for which an Akoma Ntoso URI exists)  -->
<!ELEMENT ref          @inlinereq; >
<!ATTLIST ref          ##link; >


	


<!--- the element remark is an inline element for the specification of editorial remarks (e.g., applauses, laughters, etc.) especially within debate records -->
<!ELEMENT remark       @inline; >
<!ATTLIST remark       type #remarkType; #IMPLIED >
<!--- the element recordedTime is an inline element for the specification of an explicit mention of a time (e.g., in a debate) -->
<!ELEMENT recordedTime   @inline; >
<!ATTLIST recordedTime   type #timeType; #IMPLIED
                         ##time; >




	
<!-- =====================================================================

        AN marker elements
        Comment: AN-specific marker elements are connected to the 
        identification of locations within the legal structure, anywhere where 
        there is text. 
        
     ===================================================================== -->


<!--- the element noteRef is a reference to a editorial note placed in the notes metadata section -->
<!ELEMENT noteRef      @markeropt; >
<!ATTLIST noteRef      ##notes; ##link;>


<!--- the complex type eolType is shared by eol and eop elements as being able to specify a position within the next word in which the break can happen -->
<!ENTITY @ eolType  "@markeropt;" "breakat  #INTEGER #IMPLIED">
<!--- the element eol (end of line) is a marker for where in the original text the line breaks. If the line breaks within a word, place the element BEFORE the word and place the number of characters before the break in the attribute breakat -->
<!ELEMENT eol   @eolType; >
<!--- the element eop (end of page) is a marker for where in the original text the page breaks. Do NOT use a eol element, too. If the page breaks within a word, place the element BEFORE the word and place the number of characters before the break in the attribute breakat -->
<!ELEMENT eop   @eolType; >

	
<!-- =====================================================================

        AN popup elements
        Comment: AN-specific popup elements are connected to the 
        identification of structural elements that contain full structures 
        within a text content, but are not of textual nature.

     ===================================================================== -->


<!ENTITY @ popupStructure " ( @@blockElements; | intro | wrap | heading | subheading | content | num | @@containerElements;  | @@ANcontainers; )+" "##corereq; ">





<!--- the element authorialNote is a popup element containing an authorial (non-editorial) note in the main flow of the text. -->
<!ELEMENT authorialNote   @popupStructure;>
<!ATTLIST authorialNote   ##notes;>




	

	
<!-- =====================================================================

        HTML elements
        Comment: Many elements are drawn directly from HTML 4.0
        Pattern: Reuse Document Types (partial)
        Reference: http://www.xmlpatterns.com/ReuseDocumentTypesMain.shtml

     ===================================================================== -->


<!--- The element div is an HTML element, but is NOT used in Akoma Ntoso as in HTML. Instead of being used as a generic block, Akoma Ntoso uses div as a generic container (as in common practice) -->
<!ELEMENT div  @blocksreq; >
<!--- The element p is an HTML element and is used in Akoma Ntoso as in HTML, for the generic paragraph of text (a block) -->
<!ELEMENT p    @inline; >
<!--- The element span is an HTML element and is used in Akoma Ntoso as in HTML, for the generic inline -->
<!ELEMENT span @inline; >




<!-- =====================================================================

        Metadata elements for all documents

     ===================================================================== -->
<!--- The element meta is the overall container of all metadata elements. It contains all specific metadata containers. -->
<!ELEMENT meta             (identification, publication?, classification*, 
                             temporalData*, references*, notes* ) >


<!--- The element identification is the metadata container of identifying information of the document according to the FRBR hierarchy -->
<!ELEMENT identification   (FRBRWork, FRBRExpression, FRBRManifestation, FRBRItem?) >
<!ATTLIST identification   ##source; >

<!--- The complexType coreProperties lists the identifying properties available at any of the FRBR hierarchy levels. -->
<!ENTITY @ coreProperties   "(FRBRthis, FRBRuri+, FRBRalias*, FRBRdate, FRBRauthor+ )" >
<!--- The group langProperties lists the language-specific properties that are characteristics of the FRBR Expression level. -->
<!ENTITY @@ langProperties   "(FRBRlanguage*, FRBRtranslation*)" >

<!--- The element FRBRWork is the metadata container of identifying properties related to the Work level according to the FRBR hierarchy -->
<!ELEMENT FRBRWork             @coreProperties; >
<!--- The element FRBRExpression is the metadata container of identifying properties related to the Expression level according to the FRBR hierarchy -->
<!ELEMENT FRBRExpression       (@coreProperties;, (@@langProperties;)) >
<!--- The element FRBRManifestation is the metadata container of identifying properties related to the Manifestation level according to the FRBR hierarchy -->
<!ELEMENT FRBRManifestation    @coreProperties; >
<!--- The element FRBRItem is the metadata container of identifying properties related to the Item level according to the FRBR hierarchy. -->
<!ELEMENT FRBRItem             @coreProperties; >


<!--- The element FRBRthis is the metadata property containing the URI of the specific component of the document in the respective level of the FRBR hierarchy -->
<!ELEMENT FRBRthis             @metaopt;>
<!ATTLIST FRBRthis             ##value; >
<!--- The element FRBRuri is the metadata property containing the URI of the whole document in the respective level of the FRBR hierarchy -->
<!ELEMENT FRBRuri              @metaopt;>
<!ATTLIST FRBRuri              ##value; >
<!--- The element FRBRalias is the metadata property containing additional well-known names of the document in the respective level of the FRBR hierarchy -->
<!ELEMENT FRBRalias            @metaopt;>
<!ATTLIST FRBRalias            ##value; >
<!--- The element FRBRdate is the metadata property containing a relevant date of the document in the respective level of the FRBR hierarchy. Attribute name specifies which actual date is contained here. -->
<!ELEMENT FRBRdate             @metaopt;>
<!ATTLIST FRBRdate             ##date; ##name; >
<!--- The element FRBRauthor is the metadata property containing a relevant author of the document in the respective level of the FRBR hierarchy. Attribute as specifies the roleof the author. -->
<!ELEMENT FRBRauthor           @metaopt;>
<!ATTLIST FRBRauthor           ##link; 
                              as #ANYURI  #IMPLIED >
<!--- The element FRBRlanguage is the metadata property containing a RFC4646 (three-letter code) of the main human language used in the content of this expression -->
<!ELEMENT FRBRlanguage            @metaopt;>
<!ATTLIST FRBRlanguage            language #language; #REQUIRED >

<!--- The element FRBRtranslation is the metadata property specifying the source of which this expression is a translation of. -->
<!ELEMENT FRBRtranslation      @metaopt;>
<!ATTLIST FRBRtranslation      ##link;
                                  fromLanguage #language; #REQUIRED
                                  pivot        #language; #IMPLIED
                                  by   #ANYURI   #REQUIRED >






<!--- The element publication is the metadata container specifying a publication event for the FRBR expression of the document. -->
<!ELEMENT publication      @metaopt; >
<!ATTLIST publication      ##date; ##show; ##name; ##number; ##refers; >

<!--- The element classification is the metadata container of a list of keywords associated to the FRBR expression of the document. -->
<!ELEMENT classification   (keyword+)>
<!ATTLIST classification   ##source; >

<!--- The element keyword is a metadata element specifying a keyword  associated to the FRBR expression of the document. Attribute dictionary (required) specifies the thesaurus out of which the keyword has been taken. -->
<!ELEMENT keyword @metaopt;>
<!ATTLIST keyword 
            ##value;
            ##show;
            dictionary  #ANYURI  #REQUIRED >




	


<!--- The element temporalData is a metadata container of all the temporal groups that cntain temporal information about any aspect of the document. In particular, versioned fragments of the text are assigned to temporal groups via the period attribute for the specification of in force or efficacy intervals, or any other type of temporal specification. -->
<!ELEMENT temporalData  (temporalGroup)+ >
<!ATTLIST temporalData     ##source; >

<!-- The element temporalGroup contains a list of time Intervals that need to be applied together to an element of the document that is associated to time information. Each temporal group can contain any number of time interval associated via the refersTo to a different time-specific concept. --> 
<!ELEMENT temporalGroup  (timeInterval+) >
<!ATTLIST temporalGroup  ##idreq; >

<!-- The element timeInterval contains all the data needed to identify a specific time interval. It is built either with two dates or with a date and a duration (exactly two of the 'start', 'end' and 'duration' attributes can be specified). Values are of the 'start' and 'end' attributes are NOT dates, but references to event elements in the corresponding metadata section. The refers attribute is a reference to a temporal concept belonging to the Akoma Ntoso ontology and specified in the references section -->
<!ELEMENT timeInterval  @metaopt; >
<!ATTLIST   timeInterval     ##refersreq; 
    start           #ANYURI        #IMPLIED
    end             #ANYURI        #IMPLIED
    duration      #DURATION   #IMPLIED
>

<!--- The group docrefs is a list of types of legal references to documents. -->
<!ENTITY @@ docRefs        "(original|passiveRef|activeRef|jurisprudence|hasAttachment|attachmentOf)" >
<!--- The group TLCs is a list of types of Top Level classes of the Akoma Ntoso ontology. -->
<!ENTITY @@ TLCs           "(TLCPerson|TLCOrganization|TLCConcept|TLCObject|TLCEvent|TLCLocation|TLCProcess|TLCRole|TLCTerm|TLCReference)" >
<!--- The group refItems is a list of types of references used in the references section. -->
<!ENTITY @@ refItems       "(@@docRefs;|@@TLCs;")>

<!--- The element references is a metadata container of all the references to entities external to the document mentioned in the document. They include references to legal documents of any form,a s well as references to people, organizations, events, roles, concepts, and anything else is managed by the Akoma Ntoso ontology. -->
<!ELEMENT references     (@@refItems;)+>
<!ATTLIST references     ##source; >

<!--- The element original is a metadata reference to the Akoma Ntoso URI of the original version of this document (i.e., the first expression) -->
<!ELEMENT original         @referenceType; >
<!--- The element passiveRef is a metadata reference to the Akoma Ntoso URI of a document providing modifications on this document (i.e., a passive references) -->
<!ELEMENT passiveRef       @referenceType; >
<!--- The element activeRef is a metadata reference to the Akoma Ntoso URI of a document that is modified by this document (i.e., an active references) -->
<!ELEMENT activeRef        @referenceType; >
<!--- The element jurisprudence is a metadata reference to the Akoma Ntoso URI of a document providing jurisprudence on this document -->
<!ELEMENT jurisprudence    @referenceType; >
<!--- The element hasAttachment is a metadata reference to the Akoma Ntoso URI of an attachment of this document -->
<!ELEMENT hasAttachment    @referenceType; >
<!ATTLIST hasAttachment    type CDATA  #IMPLIED >
<!--- The element attachmentOf is a metadata reference to the Akoma Ntoso URI of a document of which this document is an attachment -->
<!ELEMENT attachmentOf     @referenceType; >
<!ATTLIST attachmentOf     type CDATA  #IMPLIED >

<!--- The element TLCPerson is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Person -->
<!ELEMENT TLCPerson        @referenceType; >
<!--- The element TLCOrganization is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Organization -->
<!ELEMENT TLCOrganization  @referenceType; >
<!--- The element TLCConcept is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Concept -->
<!ELEMENT TLCConcept       @referenceType; >
<!--- The element TLCObject is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Object -->
<!ELEMENT TLCObject        @referenceType; >
<!--- The element TLCEvent is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Event -->
<!ELEMENT TLCEvent         @referenceType; >
<!--- The element TLCLocation is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Location -->
<!ELEMENT TLCLocation         @referenceType; >
<!--- The element TLCProcess is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Process -->
<!ELEMENT TLCProcess       @referenceType; >
<!--- The element TLCRole is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Role -->
<!ELEMENT TLCRole          @referenceType; >
<!--- The element TLCTerm is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Term -->
<!ELEMENT TLCTerm          @referenceType; >
<!--- The element TLCreference is a generic metadata reference to the Akoma Ntoso URI of an ontology instance of a class specified through the name attribute -->
<!ELEMENT TLCReference     @referenceType; >
<!ATTLIST TLCReference     ##name; >






<!--- The element notes is a metadata container of all the note elements used as footnotes and endnotes in the document. -->
<!ELEMENT notes        (note)+>
<!ATTLIST notes        ##source; >
<!--- The element note is a metadata element containing the text of the footnote and endnote specified. -->
<!ELEMENT note         @blocksreq;>


	
<!-- =====================================================================

        Components

     ===================================================================== -->
	
<!--- The element components is a container of all components referred to in the main part of the document -->
<!ELEMENT components (component+) >
<!ELEMENT component (@@documentType;) >
<!ATTLIST component ##idreq; >


<!-- =====================================================================

        End of Schema

     ===================================================================== -->
 