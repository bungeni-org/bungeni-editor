/*
 * panelReportByOrder.java
 *
 * Created on Jun 3, 2010, 12:09:47 PM
 */

package org.bungeni.trackchanges.ui;

import java.awt.Component;
import java.util.concurrent.ExecutionException;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import net.java.swingfx.waitwithstyle.PerformanceInfiniteProgressPanel;
import org.bungeni.odfdocument.report.IBungeniOdfDocumentReportProcess;
import org.bungeni.odfdocument.report.IBungeniOdfDocumentReportUI;
import org.bungeni.odfdom.document.BungeniOdfDocumentHelper;

/**
 *
 * @author Ashok Hariharan
 */
public class panelReportByOrder extends panelChangesBase implements IBungeniOdfDocumentReportUI {
    private static org.apache.log4j.Logger log            =
        org.apache.log4j.Logger.getLogger(panelReportByOrder.class.getName());
    public static JFrame                   thisFrame = null;
    private IBungeniOdfDocumentReportProcess reportProcess = null;
    private BungeniOdfDocumentHelper[] reportInputDocuments;
    
    /** Creates new form panelReportByOrder */
    public panelReportByOrder() {
        super();
        initComponents();
    }

      public panelReportByOrder(JFrame parentFrm, String pName) {
           super(parentFrm, pName);
           initComponents();
     }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMoveUp = new javax.swing.JButton();
        btnMoveDown = new javax.swing.JButton();
        btnFinish = new javax.swing.JButton();
        scrollReport = new javax.swing.JScrollPane();
        treeReportByOrder = new javax.swing.JTree();

        btnMoveUp.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        btnMoveUp.setText("Move UP");

        btnMoveDown.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        btnMoveDown.setText("Move DOWN");

        btnFinish.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        btnFinish.setText("Finish");

        treeReportByOrder.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        scrollReport.setViewportView(treeReportByOrder);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnMoveUp, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveDown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(298, 298, 298))
            .addComponent(scrollReport, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scrollReport, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMoveUp)
                    .addComponent(btnMoveDown)
                    .addComponent(btnFinish))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinish;
    private javax.swing.JButton btnMoveDown;
    private javax.swing.JButton btnMoveUp;
    private javax.swing.JScrollPane scrollReport;
    private javax.swing.JTree treeReportByOrder;
    // End of variables declaration//GEN-END:variables

    private void initialize() {
        PANEL_FILTER_REVIEW_STAGE = "ClerkConsolidationReview";
        PANEL_REVIEW_STAGE        = "";
       // loadFilesFromFolder();
        startProgress();
        loadTreeWorker treeLoader = new loadTreeWorker();
        treeLoader.execute();
    }


    class loadTreeWorker extends SwingWorker {

        @Override
        protected Object doInBackground() throws Exception {
                getProcessHook().prepareProcess(reportInputDocuments);
                return Boolean.TRUE;
        }

        @Override
        protected void done(){
                try {
                    Boolean bProcessDocs = (Boolean) get();
                    loadTree();
                    stopProgress();
                } catch (InterruptedException ex) {
                    log.error("Error while loading tree ", ex);
                } catch (ExecutionException ex) {
                    log.error("Error while loading tree ", ex);
                }
        }

        private void loadTree(){
            
        }

    }

     public  void createAndShowGUI(JFrame parentFrame) {
                if (panelReportByOrder.thisFrame == null) {
                    panelReportByOrder.thisFrame = new JFrame("Report");
                    panelReportByOrder.thisFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    this.setParentFrame(parentFrame);
                    this.setPanelName("ReportByOrder");
                    panelReportByOrder.thisFrame.getContentPane().add(this);
                    panelReportByOrder.thisFrame.pack();
                    panelReportByOrder.thisFrame.setAlwaysOnTop(true);
                    panelReportByOrder.thisFrame.setVisible(true);
                } else {
                    if (thisFrame.isVisible()) {
                        thisFrame.requestFocus();
                    } else {
                        thisFrame.setVisible(true);
                        thisFrame.requestFocus();
                    }
                }
    }

    public boolean showUI(JFrame parentf) {
       createAndShowGUI(parentf);
       return true;
    }

    public boolean hasUICompleted() {
       return (!thisFrame.isVisible());
    }

    public boolean setProcessHook(IBungeniOdfDocumentReportProcess processHook) {
        this.reportProcess = processHook;
        return true;
    }

    public boolean setInputDocuments(BungeniOdfDocumentHelper[] dhelpers) {
        this.reportInputDocuments = dhelpers;
        return true;
    }

    public IBungeniOdfDocumentReportProcess getProcessHook(){
        return this.reportProcess;
    }

    private void initialize_listBoxes() {
       
    }

        
    public boolean initUI() {
            initialize();
            return true;
    }

    Component originalPane;

      /**
     * This covers the panel with a glass pane and runs the infinit progress bar.
     * Must be called before invoking the worker thread
     * @return
     */
    public boolean startProgress(){
        boolean bState = false;
        try {
            originalPane = thisFrame.getGlassPane();
            PerformanceInfiniteProgressPanel glassPane;
            parentFrame.setGlassPane(glassPane = new PerformanceInfiniteProgressPanel());
            glassPane.setVisible(true);
            bState = true;
        } catch (Exception ex) {
            log.error("startProgress : " + ex.getMessage());
        }
        return bState;
    }


    /**
     * This must be called only after a startProgress() api has been called.
     * stopProgress() is usually called when the worker threard completes , usually after
     * the get() api in SwingWorker.done().
     * @return
     */
    public boolean stopProgress() {
        boolean bState = false;
        try {
          final PerformanceInfiniteProgressPanel pPanel =
                  (PerformanceInfiniteProgressPanel) parentFrame.getGlassPane();
                   pPanel.setVisible(false);
                   parentFrame.setGlassPane(originalPane);
                   bState = true;
        } catch (Exception ex) {
            log.error("endProgress : " + ex.getMessage());
        }
        return bState;
    }

}
