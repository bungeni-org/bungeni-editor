/*
 * panelReportByOrder.java
 *
 * Created on Jun 3, 2010, 12:09:47 PM
 */

package org.bungeni.trackchanges.ui;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import org.bungeni.odfdocument.report.IBungeniOdfDocumentReportProcess;
import org.bungeni.odfdocument.report.IBungeniOdfDocumentReportUI;
import org.bungeni.odfdom.document.BungeniOdfDocumentHelper;
import org.bungeni.odfdom.document.changes.BungeniOdfChangeContext;
import org.bungeni.odfdom.document.changes.BungeniOdfTrackedChangesHelper;
import org.bungeni.odfdom.document.changes.BungeniOdfTrackedChangesHelper.StructuredChangeType;
import org.odftoolkit.odfdom.doc.text.OdfTextChangedRegion;
import org.odftoolkit.odfdom.doc.text.OdfTextSection;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author Ashok Hariharan
 */
public class panelReportByOrder extends panelChangesBase implements IBungeniOdfDocumentReportUI {
    private static org.apache.log4j.Logger log            =
        org.apache.log4j.Logger.getLogger(panelReportByOrder.class.getName());
    public static JFrame                   thisFrame = null;
    private IBungeniOdfDocumentReportProcess reportProcess = null;
    /** Creates new form panelReportByOrder */
    public panelReportByOrder() {
        super();
        initComponents();
    }

      public panelReportByOrder(JFrame parentFrm, String pName) {
           super(parentFrm, pName);
            PANEL_FILTER_REVIEW_STAGE = "ReportsView";
            PANEL_REVIEW_STAGE = "ClerkReview";
            initComponents();
            initialize();
            loadFilesFromFolder();
     }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollAmendments = new javax.swing.JScrollPane();
        listAmendmentsByorder = new javax.swing.JList();
        btnMoveUp = new javax.swing.JButton();
        btnMoveDown = new javax.swing.JButton();
        btnFinish = new javax.swing.JButton();

        listAmendmentsByorder.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        listAmendmentsByorder.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        scrollAmendments.setViewportView(listAmendmentsByorder);

        btnMoveUp.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        btnMoveUp.setText("Move UP");

        btnMoveDown.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        btnMoveDown.setText("Move DOWN");

        btnFinish.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        btnFinish.setText("Finish");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnMoveUp, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveDown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(298, 298, 298))
            .addComponent(scrollAmendments, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scrollAmendments, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMoveUp)
                    .addComponent(btnMoveDown)
                    .addComponent(btnFinish))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinish;
    private javax.swing.JButton btnMoveDown;
    private javax.swing.JButton btnMoveUp;
    private javax.swing.JList listAmendmentsByorder;
    private javax.swing.JScrollPane scrollAmendments;
    // End of variables declaration//GEN-END:variables

    private void initialize() {
       initialize_listBoxes();
    }


     public static void createAndShowGUI(JFrame parentFrame) {
                if (panelReportByOrder.thisFrame == null) {
                    panelReportByOrder.thisFrame = new JFrame("Report");
                    panelReportByOrder.thisFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    panelReportByOrder.thisFrame.getContentPane().add(new panelReportByOrder(parentFrame, "ReportByOrder"));
                    panelReportByOrder.thisFrame.pack();
                    panelReportByOrder.thisFrame.setAlwaysOnTop(true);
                    panelReportByOrder.thisFrame.setVisible(true);
                } else {
                    if (thisFrame.isVisible()) {
                        thisFrame.requestFocus();
                    } else {
                        thisFrame.setVisible(true);
                        thisFrame.requestFocus();
                    }
                }
    }

    public boolean showUI(JFrame parentf) {
       createAndShowGUI(parentf);
       return true;
    }

    public boolean hasUICompleted() {
       return (!thisFrame.isVisible());
    }

    public boolean setProcessHook(IBungeniOdfDocumentReportProcess processHook) {
        this.reportProcess = processHook;
        return true;
    }

    private void initialize_listBoxes() {
       
    }

    /**
     * Group changes acrosss documents by amendment order
     */
    class AmendmentsByOrderListModel extends DefaultListModel {

        class documentChange {
            String documentURI;
            List<HashMap<String, Object>> changeMarks = new ArrayList<HashMap<String,Object>>(0);
        }

        class groupedChanges {
            String sectionType ;
            String sectionName ;
            Integer nOrder = 0;
            documentChange docChange;
            
            public groupedChanges(){

            }

            public groupedChanges(String sType, String sName, documentChange dChange) {
                this.sectionName = sName;
                this.sectionType = sType;
                this.docChange = dChange;
            }
        }

        HashMap<String, groupedChanges> groupedChangesmap = new HashMap<String, groupedChanges>();


        public void updateModel(){
            getContainerInterface().startProgress();
            SwingWorker modelWorker = new SwingWorker(){
                @Override
                protected Object doInBackground() throws Exception {
                        buildModel();
                        return Boolean.TRUE;
                }
                @Override
                protected void done(){
                   
                    getContainerInterface().stopProgress();
                }
            };
            modelWorker.execute();
        }

        private void buildModel(){
            //build the list model
            for (BungeniOdfDocumentHelper docHelper : changesInfo.getDocuments()) {
                String docAuthor       = docHelper.getPropertiesHelper().getUserDefinedPropertyValue("BungeniDocAuthor");
                BungeniOdfTrackedChangesHelper  changeHelper    = docHelper.getChangesHelper();
                Element changeContainer = changeHelper.getTrackedChangeContainer();
                ArrayList<OdfTextChangedRegion> changes = changeHelper.getChangedRegionsByCreator(changeContainer,
                                                                      docAuthor);

                for (OdfTextChangedRegion odfTextChangedRegion : changes) {
                    StructuredChangeType    scType     = changeHelper.getStructuredChangeType(odfTextChangedRegion);
                    Node changeitemStart = null, changeitemEnd = null;
                    BungeniOdfChangeContext chctx = null;
                    if (scType.changetype.equals(BungeniOdfTrackedChangesHelper.__CHANGE_TYPE_DELETION__)) {
                        changeitemStart = changeHelper.getChangeItem(scType.changeId);
                        chctx = new BungeniOdfChangeContext(changeitemStart, docHelper);
                    }
                    if (scType.changetype.equals(BungeniOdfTrackedChangesHelper.__CHANGE_TYPE_INSERTION__)) {
                        changeitemStart = changeHelper.getChangeStartItem(scType.changeId);
                        changeitemEnd = changeHelper.getChangeEndItem(scType.changeId);
                        chctx = new BungeniOdfChangeContext(changeitemStart, changeitemEnd,  docHelper);
                    }
                    OdfTextSection aparentSection = (OdfTextSection) chctx.getParentSection();
                    String sectionName = aparentSection.getTextNameAttribute();
                    String sectionType = chctx.getParentSectionType();
                    if (groupedChangesmap.containsKey(sectionType)) {
                       // documentChange dChange = new
                       // groupedChangesmap.put(n)
                    }
                }


            }

        }
        
    }


}
