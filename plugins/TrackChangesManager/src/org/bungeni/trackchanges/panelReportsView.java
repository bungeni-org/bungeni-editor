package org.bungeni.trackchanges;
//~--- non-JDK imports --------------------------------------------------------

import java.util.concurrent.ExecutionException;
import org.bungeni.odfdom.document.BungeniOdfDocumentHelper;
import org.bungeni.trackchanges.utils.AppProperties;
import org.bungeni.trackchanges.utils.CommonFunctions;
import org.bungeni.trackchanges.utils.ReviewDocuments;



//~--- JDK imports ------------------------------------------------------------


import java.io.File;
import java.io.FilenameFilter;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.bungeni.odfdocument.report.DocReportTemplateListModel;
import org.bungeni.trackchanges.uno.UnoOdfFile;
import org.bungeni.trackchanges.uno.UnoOdfOpenFiles;

/**
 * This is the first tab / workflow in the bill amendments for the clerk
 * This tab loads the documents and provides options for the clerk to review
 * the documents submitted by the users
 * @author  Ashok Hariharan
 */
public class panelReportsView extends panelChangesBase {
    private static org.apache.log4j.Logger log =
        org.apache.log4j.Logger.getLogger(panelReportsView.class.getName());

    /** Creates new form panelTrackChanges */
    public panelReportsView(JFrame parentFrame, String pName) {
        super(parentFrame, pName);
        PANEL_FILTER_REVIEW_STAGE = "ReportsView";
        PANEL_REVIEW_STAGE = "ClerkReview";
        initComponents();
        initialize();
    }

    /**
     * Initialize controls with data
     */
    private void initialize() {
        initialize_listBoxes();
        initialize_Tables();
    }

    private void initialize_listBoxes() {
        this.listReportTemplates.setModel(new DocReportTemplateListModel());
        this.listReportTemplates.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        ListSelectionModel lsm = listReportTemplates.getSelectionModel();

        lsm.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent lse) {
                ListSelectionModel lsm = (ListSelectionModel) lse.getSource();

                if (lse.getValueIsAdjusting()) {
                    return;
                }

                int firstIndex = lse.getFirstIndex();
                int lastIndex  = lse.getLastIndex();

                if (lsm.isSelectionEmpty()) {
                    return;
                } else {
                    final int minIndex = lsm.getMinSelectionIndex();
                    final String strSelection = (String) listReportTemplates.getSelectedValue().toString();
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                        // Find out which indexes are selected.
                        tblDocReports.setModel(new DocumentReportsTableModel());
                        DocumentReportsTableModel model  = (DocumentReportsTableModel) tblDocReports.getModel();
                        model.updateModel(listReportTemplates.getSelectedValue().toString());
                        model.fireTableDataChanged();                        }
                    });
                }
            }
        });
    }

    private void initialize_Tables() {
        this.tblDocReports.setModel(new DocumentReportsTableModel());
    }



    @Override
    public void updatePanel(HashMap<String, Object> infomap) {

        // to be implemented
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMembers = new javax.swing.JLabel();
        scrollMembers = new javax.swing.JScrollPane();
        listReportTemplates = new javax.swing.JList();
        scrollDocChanges = new javax.swing.JScrollPane();
        tblDocReports = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnReview = new javax.swing.JButton();

        lblMembers.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/bungeni/trackchanges/Bundle"); // NOI18N
        lblMembers.setText(bundle.getString("panelReportsView.lblMembers.text")); // NOI18N

        listReportTemplates.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        listReportTemplates.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Tinoula Awopetu", "Mashinski Murigi", "Raul Obwacha", "Felix Kerstengor" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        scrollMembers.setViewportView(listReportTemplates);

        tblDocReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Delete", "23/12", "P(3)/L(4)", "This is an exceptional rule", null},
                {"Insert", "23/12", "P(5)/L(6)", ", for eternity.", new Boolean(true)},
                {"Delete", "23/12", "P(8)/W(23)", "The rule of law", new Boolean(true)}
            },
            new String [] {
                "Action", "Date", "Position", "Text", "Accept / Reject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollDocChanges.setViewportView(tblDocReports);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        jLabel1.setText(bundle.getString("panelReportsView.jLabel1.text")); // NOI18N

        btnReview.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        btnReview.setText(bundle.getString("panelReportsView.btnReview.text")); // NOI18N
        btnReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMembers)
                    .addComponent(scrollMembers, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollDocChanges, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                    .addComponent(btnReview)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMembers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollDocChanges, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReviewActionPerformed
        try {
            int nSelectedRow = this.tblDocReports.getSelectedRow();
            if (nSelectedRow == -1) {
                JOptionPane.showMessageDialog(parentFrame, "No document was selected !");
                return;
            }
            DocumentReportsTableModel model = (DocumentReportsTableModel) this.tblDocReports.getModel();
            final DocumentReportsTableModel.ReportFile reportInfo = model.getReportInfoAt(nSelectedRow);
            getContainerInterface().startProgress();

            SwingWorker ooWorker = new SwingWorker(){

                @Override
                protected Object doInBackground() throws Exception {
                    BungeniOdfDocumentHelper docHelper = new BungeniOdfDocumentHelper(new File(reportInfo.filePath));
                    UnoOdfFile  reportFile = UnoOdfOpenFiles.getFile(docHelper);
                    return Boolean.TRUE;
                }
                
                @Override
                protected void done(){
                    try {
                        Boolean bState = (Boolean) get();
                        getContainerInterface().stopProgress();
                    } catch (InterruptedException ex) {
                        log.error("panelReportsView : " + ex.getMessage());
                    } catch (ExecutionException ex) {
                        log.error("panelReportsView : " + ex.getMessage());
                    }
                }
                
            };
            ooWorker.execute();
        } catch (Exception ex) {
            log.error("reports Review : " + ex);
        }
    }//GEN-LAST:event_btnReviewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblMembers;
    private javax.swing.JList listReportTemplates;
    private javax.swing.JScrollPane scrollDocChanges;
    private javax.swing.JScrollPane scrollMembers;
    private javax.swing.JTable tblDocReports;
    // End of variables declaration//GEN-END:variables


    private class DocumentReportsTableModel extends AbstractTableModel {


        class ReportFile {
            String filePath ;
            String fileAuthor;
            String fileCreateDate;
            String reportName;
        }
        List<ReportFile> reportInfo  = new ArrayList<ReportFile>(0);
        private String[]              column_names = {
            bundleBase.getString("panelReportsView.tblDocReports.username.text"),
            bundleBase.getString("panelReportsView.tblDocReports.reportname.text"),
            bundleBase.getString("panelReportsView.tblDocReports.reportdate.text")
        };

        public DocumentReportsTableModel() {
            reportInfo = new ArrayList<ReportFile>(0);
        }

        public DocumentReportsTableModel(String sReportName) {
            buildModel(sReportName);
          }

        public ReportFile getReportInfoAt(int iIndex) {
            return this.reportInfo.get(iIndex);
        }

        public void updateModel(final String sReportName) {

             getContainerInterface().startProgress();

             SwingWorker modelWorker = new SwingWorker() {

                @Override
                protected Object doInBackground() {
                        boolean bState = false;
                        bState = buildModel(sReportName);
                        return Boolean.valueOf(bState);

                }

                @Override
                protected void done(){
                    try {
                        Boolean bRet = (Boolean) get();
                        fireTableDataChanged();
                        getContainerInterface().stopProgress();
                    } catch (InterruptedException ex) {
                       log.error("tableModelWorker : done : " + ex.getMessage());
                    } catch (ExecutionException ex) {
                       log.error("tableModelWorker : done : " + ex.getMessage());
                    }

                }

             };
             modelWorker.execute();
       }

        @Override
        public int getRowCount(){
            return reportInfo.size();
        }

        @Override
        public int getColumnCount() {
            return column_names.length;
        }
    
        private boolean buildModel(final String sReportName) {
          boolean bState = false;
          String currentBillFolder = CommonFunctions.getWorkspaceForBill((String)AppProperties.getProperty("CurrentBillID"));
          if (currentBillFolder.length() > 0 ) {
            File fFolder = new File(currentBillFolder);
            //find files in changes folder
            if (fFolder.isDirectory()) {
               File[] files =  fFolder.listFiles(new FilenameFilter(){
               Pattern pat = Pattern.compile(ReviewDocuments.getReviewStage( PANEL_FILTER_REVIEW_STAGE).getDocumentFilterPattern()); //("clerk_u[0-9][0-9][0-9][0-9]([a-z0-9_-]*?).odt");
                    public boolean accept(File dir, String name) {
                        if (pat.matcher(name).matches()) {
                            return true;
                        }
                        return false;
                    }

                });
                for (File file : files) {
                      ReportFile rf ;
                      try {
                         if (!file.canWrite() ) {
                             log.info("file is still being writtern - " + file.getName());
                         }
                         BungeniOdfDocumentHelper reportsHelper = new BungeniOdfDocumentHelper(file);
                         String matchReportName = reportsHelper.getPropertiesHelper().getUserDefinedPropertyValue("BungeniReportName");
                         String matchReportFor = reportsHelper.getPropertiesHelper().getUserDefinedPropertyValue("BungeniReportFor");
                         String matchCreateDate = reportsHelper.getPropertiesHelper().getUserDefinedPropertyValue("BungeniReportCreateDate");
                         if (matchReportName.equals(sReportName)) {
                            rf = new ReportFile();
                            rf.fileAuthor = matchReportFor;
                            rf.filePath = reportsHelper.getDocumentPath();
                            rf.reportName = matchReportName;
                            rf.fileCreateDate = matchCreateDate;
                            reportInfo.add(rf);
                            }
                       } catch (Exception ex) {
                          log.error("panelReportsView : " + ex.getMessage());
                          ex.printStackTrace();
                       }
                }
                bState = true;
            }
        }
        return bState;
        }

      
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            ReportFile rf = reportInfo.get(rowIndex);
            switch (columnIndex) {
            case 0 :
                return rf.fileAuthor;

            case 1 :
                return rf.reportName;

            case 2 :
                    return rf.fileCreateDate;
            // case 3 :
            // return true;
            default :
                return new String("Unknown column");
            }
        }

        @Override
        public Class getColumnClass(int col) {
            return String.class;
        }

        @Override
        public String getColumnName(int column) {
            return column_names[column];
        }
    }


}
