package org.bungeni.trackchanges;

//~--- non-JDK imports --------------------------------------------------------


//~--- JDK imports ------------------------------------------------------------

import java.awt.Component;
import java.util.HashMap;
import java.util.ResourceBundle;

import javax.swing.JFrame;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import net.java.swingfx.waitwithstyle.PerformanceInfiniteProgressPanel;

/**
 *
 * @author Ashok Hariharan
 */
public class trackChangesMain extends javax.swing.JPanel implements IChangesContainer {
    private static org.apache.log4j.Logger log         =
        org.apache.log4j.Logger.getLogger(trackChangesMain.class.getName());
    public static JFrame                   parentFrame = null;
    ResourceBundle bundleBase = java.util.ResourceBundle.getBundle("org/bungeni/trackchanges/Bundle");
    int m_prevTabIndex = 0;
    public HashMap<String, IChangesPanel> panelsMap = new HashMap<String, IChangesPanel>();

    private PerformanceInfiniteProgressPanel m_glassPane =  null;

    /** Creates new form trackChangesMain */
    public trackChangesMain() {
        initComponents();
        init_Tabs();
        init_GlassPane();
    }

    /**
     * The Tabs are loaded in this function
     */
    private void init_Tabs() {
        panelTrackChangesOverview overviewPanel    = new panelTrackChangesOverview(parentFrame, "Overview");
        panelClerkOverview        clerkReviewPanel = new panelClerkOverview(parentFrame, "ClerkReview");
        panelConsolidateChanges consolidationPanel = new panelConsolidateChanges(parentFrame, "ConsolidateReview");
        panelReportsView reportsViewPanel = new panelReportsView(parentFrame, "ReportsView");
        panelApproveRejectChanges approvalPanel = new panelApproveRejectChanges(parentFrame, "ClerkApproveRejectView");

        this.panelsMap.put(overviewPanel.getPanelName(), overviewPanel);
        this.panelsMap.put(clerkReviewPanel.getPanelName(), clerkReviewPanel);
        this.panelsMap.put(consolidationPanel.getPanelName(), consolidationPanel);
        this.panelsMap.put(reportsViewPanel.getPanelName(), reportsViewPanel);
        this.panelsMap.put(approvalPanel.getPanelName(), approvalPanel);
        
        this.tabContainer.addTab(bundleBase.getString("tabName.membersOverview"), overviewPanel);
        this.tabContainer.addTab(bundleBase.getString("tabName.clerkOverview"), clerkReviewPanel);
        this.tabContainer.addTab(bundleBase.getString("tabName.consolidationOverview"), consolidationPanel);
        this.tabContainer.addTab(bundleBase.getString("tabName.reportsView"), reportsViewPanel);
        this.tabContainer.addTab(bundleBase.getString("tabName.approveRejectView"), approvalPanel);

        this.tabContainer.getModel().addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
                System.out.println("Selected index = " + tabContainer.getSelectedIndex());
                // call update with empty hashmap
               // updateCurrentPanel(new HashMap<String, Object>() {
                //    {}
                //});
                m_prevTabIndex = tabContainer.getSelectedIndex();
            }
        });
    }

    /**
     * The glass pane is initialized here -- it is used for displaying the infinit progress bar
     */
    private void init_GlassPane(){
        m_glassPane = new PerformanceInfiniteProgressPanel();
        parentFrame.setGlassPane(m_glassPane);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabContainer = new javax.swing.JTabbedPane();
        btnClose = new javax.swing.JButton();

        tabContainer.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N

        btnClose.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tabContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(349, 349, 349)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        parentFrame.dispose();
        parentFrame = null;
    }//GEN-LAST:event_btnCloseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JTabbedPane tabContainer;
    // End of variables declaration//GEN-END:variables


    public void updatePanels(HashMap<String, Object> infomap) {

        // to be implemented
    }

    public void updateCurrentPanel(HashMap<String, Object> infomap) {
        //route the update call only when there is a programattic update,
        //not when someone clicks on a tab
            ((IChangesPanel) this.tabContainer.getSelectedComponent()).updatePanel(infomap);
    }

    Component originalPane;

    /**
     * This covers the panel with a glass pane and runs the infinit progress bar.
     * Must be called before invoking the worker thread
     * @return
     */
    public boolean startProgress(){
        boolean bState = false;
        try {
            originalPane = parentFrame.getGlassPane();
            PerformanceInfiniteProgressPanel glassPane;
            parentFrame.setGlassPane(glassPane = new PerformanceInfiniteProgressPanel());
            glassPane.setVisible(true);
            bState = true;
        } catch (Exception ex) {
            log.error("startProgress : " + ex.getMessage());
        }
        return bState;
    }


    /**
     * This must be called only after a startProgress() api has been called.
     * stopProgress() is usually called when the worker threard completes , usually after
     * the get() api in SwingWorker.done().
     * @return
     */
    public boolean stopProgress() {
        boolean bState = false;
        try {
          final PerformanceInfiniteProgressPanel pPanel =
                  (PerformanceInfiniteProgressPanel) parentFrame.getGlassPane();
                   pPanel.setVisible(false);
                   parentFrame.setGlassPane(originalPane);
                   bState = true;
        } catch (Exception ex) {
            log.error("endProgress : " + ex.getMessage());
        }
        return bState;
    }

    public void updatePanel(String panelName, HashMap<String, Object> infoMap) {
        if (this.panelsMap.containsKey(panelName)) {
            this.panelsMap.get(panelName).updatePanel(infoMap);
        }
    }

   

}
